#!/bin/bash -eu
#
# CLI for the CBD build system
#

function out()
{
	local rc=${?}

	if [ -n "${TMP_DIR}" ] ; then
		rm -rf "${TMP_DIR}"
	fi

	if [ -n "${CBD_BRANCH}" ] ; then
		git branch -D "${CBD_BRANCH}" >/dev/null
	fi

	if [ "${rc}" -ne 0 ] ; then
		echo "-- Script failed" >&2
	fi

	exit "${rc}"
}

function cbd_build()
{
	local opts logfile

	if [ -z "${SERIES}" ] ; then
		echo "-- Not an Ubuntu kernel repository" >&2
		exit 1
	fi

	if ! [ -d "${HOME}"/.cache/cbd ] ; then
		mkdir "${HOME}"/.cache/cbd
	fi

	# Assemble git push options
	opts=("cbd:${SERIES}.git")
	if [ "$(git cat-file -t "${1:-}" 2>/dev/null)" = "commit" ] ; then
		# Create a temporary branch to push if the first argument is a
		# commitish
		commit=${1}
		shift
		CBD_BRANCH=cbd-${commit}
		git branch "${CBD_BRANCH}" "${commit}"
		opts+=("${CBD_BRANCH}")
	fi
	opts+=("${@}" "-o" "vars")

	echo "-- git push ${opts[*]}"

	# Kick off the build
	logfile=${HOME}/.cache/cbd/${SERIES}--${SOURCE}.log
	{ time git push "${opts[@]}" 2>&1 || exit 1 ; } | tee "${logfile}"

	if [ "${NO_DOWNLOAD}" -eq 1 ] ; then
		return
	fi

	# Source the CBD variables
	eval "$(sed -n 's/^remote: CBD/CBD/p' "${logfile}")"
	if [ -z "${CBD_JOB:-}" ] ; then
		echo "-- Failed to source CBD variables" >&2
		exit 1
	fi

	# Download the build artifacts
	cbd_download "${CBD_JOB}"
}

function cbd_download()
{
	if [ ${#} -ne 1 ] ; then
		usage
		exit 2
	fi

	local cbd_job=${1}
	local cbd_hash log arch

	if [ -z "${OUT_DIR}" ] ; then
		cbd_hash=${cbd_job%-*}
		cbd_hash=${cbd_hash##*-}

		OUT_DIR=../cbd.d/${cbd_hash}
		rm -rf "${OUT_DIR}"
	fi
	mkdir -p "${OUT_DIR}"

	echo "-- Download build artifacts to ${OUT_DIR}"

	TMP_DIR=$(mktemp -d)
	# shellcheck disable=SC2029
	ssh cbd tarball "${cbd_job}" | ( cd "${TMP_DIR}" && tar -xzvf - )

	# Move the debs to the provided output directory
	find "${TMP_DIR}" -name '*.deb' -print0 | xargs -0 -I{} mv '{}' "${OUT_DIR}"

	# Copy the build logs
	if [ -e "${TMP_DIR}"/build.log ] ; then
        cp "${TMP_DIR}"/build.log "${OUT_DIR}"
	fi
	for log in "${TMP_DIR}"/*/build.log ; do
        if [ -e "${log}" ] ; then
            arch=${log%/build.log}
            arch=${arch##*/}
            cp "${log}" "${OUT_DIR}"/build_"${arch}".log
        fi
	done

	# Save the job ID
	echo "${cbd_job}" > "${OUT_DIR}"/cbd_job.id
}

function cbd_help()
{
	if [ -z "${SERIES}" ] ; then
		ssh cbd help
	else
		git push cbd:"${SERIES}".git -o help
	fi
}

function usage()
{
	cat <<EOF
Usage: cbd-cli [-h] [-d DIR] [-n] build [COMMIT] [CBD_OPTS]
       cbd-cli [-h] [-d DIR] download CBD_JOB
       cbd-cli [-h] help

Commandline interface for the CBD kernel builder.

Supported commands:
  build                Build (and download) kernel packages.
  download             Download kernel packages.
  help                 Show CBD help.

Optional arguments:
  -h, --help           Show this help text and exit.
  -d, --directory DIR  Directory to download the Debian packages to. If not
                       provided, defaults to '../cbd.d/<git_hash>'.
  -n, --no-download    Don't download packages after the build.
EOF
}

OUT_DIR=
NO_DOWNLOAD=0
cmd=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-d|--directory)
			shift
			OUT_DIR=${1}
			;;
		-h|--help)
			usage
			exit
			;;
		-n|--no-download)
			NO_DOWNLOAD=1
			;;
		build|download|help)
			cmd=${1}
			shift
			break
			;;
	esac
	shift
done

if [ -z "${cmd}" ] ; then
	usage
	exit 2
fi

CBD_BRANCH=
TMP_DIR=
trap out EXIT INT TERM HUP

SERIES=
SOURCE=
if [ -e debian/debian.env ] ; then
	# shellcheck disable=SC1091
	. debian/debian.env
	SOURCE=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Source)
	SERIES=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Distribution)
	if [ "${SERIES}" = "UNRELEASED" ] ; then
		SERIES=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Distribution \
									 -o 1 -c 1)
	fi
fi

cbd_"${cmd}" "${@}"
