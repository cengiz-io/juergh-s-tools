#!/bin/bash
#
# Check the commits in the provided commit range for upstream 'Fixes' commits
#

LINUX_REPO=/data/git/linux.git

PATTERN_LIST=(
	"commit [0-9a-f]* upstream"
	"upstream commit [0-9a-f]*"
	"cherry[ -]?picked from .*\b[0-9a-f]*"
	"back[ -]?ported from .*\b[0-9a-f]*"
)
PATTERN=$(printf "|%s" "${PATTERN_LIST[@]}")
PATTERN=${PATTERN:1}

function parse_commit_message()
{
	local commit=${1}

	git log --format="%b" "${commit}" -1 | \
		grep -iP "${PATTERN}" | \
		grep -oP '[0-9a-f]{12,}' || true
}

function is_in_upstream()
{
	local commit=${1}

	git --git-dir "${LINUX_REPO}" cat-file -e "${commit}^{commit}" 2>/dev/null
}

function find_upstream_commits()
{
	local rev_range=("${@}")
	local line commit upstream verified u

	while IFS= read -r line ; do
		commit=${line%% *}

		# Is it an upstream commit hash?
		if is_in_upstream "${commit}" ; then
			echo "${commit}"
			continue
		fi

		# Parse the commit message for upstream hashes
		readarray -t upstream < <(parse_commit_message "${commit}")
		if [ "${#upstream[@]}" -eq 0 ] ; then
			echo "No upstream hash found for: ${line}" >&2
			continue
		fi

		# Verify that the upstream reference exists in Linus' repo
		verified=0
		for u in "${upstream[@]}" ; do
			if is_in_upstream "${u}" ; then
				verified=1
				echo "${u::12}"
			fi
		done
		if [ "${verified}" -eq 0 ] ; then
			echo "${commit} -> upstream hash(es) found but not verifiable" \
				 " (${upstream[*]})" >&2
		fi

	done < <(git log --format="%h (\"%s\")" "${rev_range[@]}")
}

function usage()
{
	cat <<EOF
Usage: check-linux-fixes [-h] REV_RANGE

List the Fixes commits for the provided commit range.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

rev_range=()

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			rev_range=("${@}")
			break
			;;
	esac
	shift
done

if [ "${#rev_range[@]}" -eq 0 ] ; then
	usage
	exit 2
fi

# Get the upstream commit hashes for the commits in the provided rev range
readarray -t upstream < <(find_upstream_commits "${rev_range[@]}")

# Find fixes for the upstream commits
for commit in "${upstream[@]}" ; do
	readarray -t fixes < <(find-linux-fixes "${commit}")
	for fix in "${fixes[@]}" ; do
		c=$(echo "${fix}" | awk '{ print $1 }')
		# Check if the fix is already present in the provided rev range
        color="\e[31m"  # red
		for u in "${upstream[@]}" ; do
			if [ "${u}" = "${c}" ] ; then
				color="\e[0m"  # no color
				break
			fi
		done
		echo -e "${color}$fix\e[0m"
	done
done
