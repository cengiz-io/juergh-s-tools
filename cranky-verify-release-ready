#!/bin/bash -eu
#
# Run verify-release-ready against a set of kernel packages
#

function pr_fail() { echo -e "\033[31mfail\033[0m     ${*}" ; }
function pr_pass() { echo -e "\033[32mpass\033[0m" ; }
function pr_warn() { echo -e "\033[33mwarning\033[0m  ${*}" ; }

function get_abi()
{
	local DEBIAN v

	DEBIAN=debian
	if [ -e debian/debian.env ] ; then
		# shellcheck disable=SC1091
		. debian/debian.env
	fi

	readarray -t v < <(dpkg-parsechangelog -l"${DEBIAN}"/changelog \
										   -SVersion | tr ".-" "\n")
	echo "${v[0]}.${v[1]}.${v[2]}-${v[3]}"
}

function check_abi()
{
	local abi=${1}
	local this_abi

	this_abi=$(get_abi)

	printf "%60s: " "matching ABIs (${this_abi})"
	if [ "${this_abi}" = "${abi}" ] ; then
		pr_pass
	else
		pr_fail
	fi
}

function check_cycle()
{
	local master deriv

	if ! [ -e debian/debian.env ] ; then
		return
	fi

	# shellcheck disable=SC1091
	. debian/debian.env

	# shellcheck disable=SC1091
	. "${DEBIAN}"/etc/update.conf

	master=$(awk '{ print $2 }' "${DEBIAN_MASTER}"/tracking-bug)
	deriv=$(awk '{ print $2 }' "${DEBIAN}"/tracking-bug)

	printf "%60s: " "matching SRU cycle (${deriv})"
	if [ "${deriv}" = "${master}" ] ; then
		pr_pass
	elif [ "${deriv%-*}" = "${master%-*}" ] ; then
		pr_warn "(master cycle = ${master})"
	else
		pr_fail "(master cycle = ${master})"
	fi

	prev_master=$(git log --format=%h -- "${DEBIAN_MASTER}"/tracking-bug | head -1 | \
	              xargs -I{} git show {}~1:"${DEBIAN_MASTER}"/tracking-bug | \
	              awk '{ print $2}')
	prev_deriv=$(git log --format=%h -- "${DEBIAN}"/tracking-bug | head -1 | \
	             xargs -I{} git show {}~1:"${DEBIAN}"/tracking-bug | \
	             awk '{ print $2}')
	printf "%60s: " "matching previous SRU cycle (${prev_deriv})"
	if [ "${prev_deriv}" = "${prev_master}" ] ; then
		pr_pass
	elif [ "${prev_deriv%-*}" = "${prev_master%-*}" ] ; then
		pr_warn "(master cycle = ${prev_master})"
	else
		pr_fail "(master cycle = ${prev_master})"
	fi
}

function check_scycle()
{
	local deriv prev prev_deriv

	if ! [ -e debian/debian.env ] ; then
		return
	fi

	# shellcheck disable=SC1091
	. debian/debian.env
	deriv=$(sed 's,.* ,,' "${DEBIAN}"/tracking-bug)

	if [ "${deriv#s}" = "${deriv}"  ] ; then
		# Not a security respin cycle
		return
	fi

	# Get the previous cycle name
	prev_deriv=$(git log --format=%h -- "${DEBIAN}"/tracking-bug | \
	             head -2 | tail -1 | \
	             xargs -I{} git show {}:"${DEBIAN}"/tracking-bug | \
	             sed 's,.* ,,')

	printf "%60s: " "security SRU cycle (${deriv})"
	deriv=${deriv%-*}
	p_deriv=${prev_deriv%-*}
	if [ "${deriv#s}" = "${p_deriv#s}" ] ; then
		pr_pass
	else
		pr_fail "(prev cycle = ${prev_deriv})"
	fi
}

function check_emails()
{
	local ae sob

	ae=$(git log --format=%ae -1)
	printf "%60s: " "commit author email (${ae})"
	if [ "${ae/@canonical.com/}" != "${ae}" ] ; then
		pr_pass
	else
		pr_fail
	fi

	sob=$(git log -1 | grep 'Signed-off-by:')
	sob=${sob#*Signed-off-by: }
	printf "%60s: " "SOB (${sob})"
	if [ "${sob/@canonical.com/}" != "${sob}" ] ; then
		pr_pass
	else
		pr_fail
	fi
}

function verify_current()
{
	local abi=${1} log=${2}
	local path opts

	echo
	path="$(realpath .)$(printf "%66s")"
	echo -e "\033[48;5;160m${path::66}\033[0m"

	if [ "${log}" -ne 0 ] ; then
		echo "------------------------------------------------------------------"
		prev=$(git log --oneline HEAD | \
				   grep -m2 -P "[0-9a-f]{12} UBUNTU: Ubuntu.*-${abi%-*}" | \
				   tail -1)
		opts=()
		if [ "${log}" -eq 1 ] ; then
			opts=("--oneline")
		fi
		git --no-pager log --decorate --color=always "${opts[@]}" "${prev%% *}"^..
		if [ "${log}" -eq 2 ] ; then
			echo
		fi
	fi

	echo "------------------------------------------------------------------"
	if [ -n "${abi}" ] ; then
		check_abi "${abi}"
	fi
	check_cycle
	check_scycle
	check_emails
	if [ -e "${KTEAM_TOOLS}"/maintscripts/verify-release-ready ] ; then
		"${KTEAM_TOOLS}"/maintscripts/verify-release-ready || true
	else
		"${CRANKY}" verify-release-ready --current || true
	fi
}

function usage()
{
    cat <<EOF
Usage: cranky-verify-release-ready [-c] [-h] [-l] [-o]

Run verify-release-ready and check commit author and SOB email addresses.

Optional arguments:
  -c, --current      Run verify-release-ready only in the current directory.
  -h, --help         Show the current help text and exit.
  -l, --log          Shwo git log.
  -o, --log-oneline  Show git log --oneline.
EOF
}

CRANKY=${CRANKY:-cranky}

current=0
log=0

while [ ${#} -gt 0 ] ; do
    case "${1}" in
		-c|--current)
			current=1
			;;
		-h|--help)
			usage
			exit
			;;
		-l|--log)
			log=2
			;;
		-o|--log-oneline)
			log=1
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

abi=$(get_abi)

if [ ${current} -eq 1 ] ; then
	verify_current "${abi}" "${log}"
else
	while IFS= read -r path ; do
		cd "${path}"
		verify_current "${abi}" "${log}"
	done < <("${CRANKY}" shell-helper source-packages-path)
fi
