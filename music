#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import warnings

import taglib

from PIL import Image

# -----------------------------------------------------------------------------
# Helper functions

def add(name, *args, **kwargs):
    def dec(name, *args, **kwargs):
        def _decorator(func):
            func.__dict__.setdefault(name, []).insert(0, (args, kwargs))
            return func
        return _decorator
    return dec(name, *args, **kwargs)

# -----------------------------------------------------------------------------
# Commands

@add('help', 'Show image information')
def do_image_info(args):
    """
    Show image information
    """
    for f in args.file:
        print()
        print(f)
        i = Image.open(f)
        print('  Size: {}'.format(i.size))
        i.close()
    return 0

@add('help', 'Resize image to 400x400')
def do_image_resize(args):
    """
    Resize image
    """
    for f in args.file:
        print()
        print(f)
        i = Image.open(f)
        n = i.resize((400, 400), Image.ANTIALIAS)
        n.save(f + '.new', 'JPEG')
        os.rename(f + '.new', f)
        print('  Size: {}'.format(n.size))
        i.close()
        n.close()
    return 0

@add('help', 'Show mp3 BPM (beats per minute)')
def do_mp3_bpm_show(args):
    """
    Show mp3 file BPM information
    """
    import librosa

    # Supress 'UserWarning: PySoundFile failed. Trying audioread instead.'
    warnings.filterwarnings("ignore")

    first = True
    for f in args.file:
        if first:
            first = False
        else:
            print()
        print(f)
        y, sr = librosa.load(f, sr=None)
        bpm, _ = librosa.beat.beat_track(y=y, sr=sr)
        print('  BPM: {:.2f}'.format(bpm))
    return 0

@add('help', 'Convert mp3')
def do_mp3_convert(args):
    """
    Convert mp3
    """
    ffmpeg_opts = (
        '-y',
        '-loglevel', '24',
        '-codec:a', 'libmp3lame',
        '-b:a', '192k',
        '-ac:a', '2',
        '-ar:a', '44100'
    )
    for f in args.file:
        new = f + '.new.mp3'
        print(f)
        # pylint: disable=W1510
        proc = subprocess.run(('ffmpeg', '-i', f) + ffmpeg_opts + (new, ))
        if proc.returncode:
            print('Failed to convert {}'.format(f))
        else:
            os.replace(new, f)
    return 0

@add('help', 'Show mp3 information')
def do_mp3_info(args):
    """
    Show mp3 information
    """
    for f in args.file:
        print()
        print(f)
        t = taglib.File(f)   # pylint: disable=I1101
        print('  Channels    : {}'.format(t.channels))
        print('  Bit rate    : {:<5} [kbit/s]'.format(t.bitrate))
        print('  Sample rate : {:<5} [Hz]'.format(t.sampleRate))
        print('  Length      : {:<5} [sec]'.format(t.length))
    return 0

@add('arg', '-f', '--force', action='store_true', help='Write the tags')
@add('help', 'Set mp3 tag details')
def do_mp3_tag_set(args):
    """
    Set mp3 file metadata tags
    """
    for f in args.file:
        print()
        print(f)
        tmp, song = os.path.split(os.path.abspath(f))
        tmp, album = os.path.split(tmp)
        tmp, artist = os.path.split(tmp)
        tracknumber, tmp, title = song.split(' ', 2)

        tracknumber = tracknumber.lstrip('0')
        title = os.path.splitext(title)[0]

        tags = {
            'ALBUM': [album],
            'ARTIST': [artist],
            'TITLE': [title],
            'TRACKNUMBER': [tracknumber],
        }

        for key, val in tags.items():
            print('  {:<12}: {}'.format(key, ' '.join(val)))

        if not args.force:
            print('Use -f, --force to write the tags')
            continue

        t = taglib.File(f)   # pylint: disable=I1101
        t.tags = tags
        t.save()
    return 0

@add('help', 'Show mp3 tag details')
def do_mp3_tag_show(args):
    """
    Show mp3 file metadata tags
    """
    for f in args.file:
        print()
        print(f)
        t = taglib.File(f)   # pylint: disable=I1101
        for key, val in t.tags.items():
            print('  {:<12}: {}'.format(key, ' '.join(val)))
    return 0

# -----------------------------------------------------------------------------
# Main entry point

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='commands')

    module = sys.modules[__name__]
    for attr in (a for a in dir(module) if a.startswith('do_')):
        cmd_name = attr[3:].replace('_', '-')
        cmd_cb = getattr(module, attr)
        cmd_desc = cmd_cb.__doc__ or ''
        cmd_help = getattr(cmd_cb, 'help', [])
        cmd_args = getattr(cmd_cb, 'arg', [])

        sparser = subparsers.add_parser(cmd_name, help=cmd_help[0][0][0],
                                        description=cmd_desc, add_help=False)

        sparser.add_argument('file', nargs='+', help='Filename')
        sparser.add_argument('-h', '--help', action='help')
        for (args, kwargs) in cmd_args:
            sparser.add_argument(*args, **kwargs)

        sparser.set_defaults(func=cmd_cb)

    # Parse the arguments
    args = parser.parse_args()
    if getattr(args, 'func', None) is None:
        parser.print_help()
        return 2

    return args.func(args)

if __name__ == "__main__":
    sys.exit(main())
