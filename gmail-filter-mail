#!/bin/bash -eu

function out()
{
	local rc=$?

	trap - EXIT INT TERM HUP

	if [ -n "${CONFIG}" ] ; then
		rm -f "${CONFIG}"
	fi

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function move_mail()
{
	local src=${1} dst=${2} op=${3}

	cat <<__EOF__

print('')
print('-- Move mail: ${op//\'/\\\'}')
messages = account['${src}']:${op}
move_messages(messages, account['${dst}'])
__EOF__
}

function move_mail_noise()
{
	local src=${1} op=${2}

	move_mail "${src}" "${src%%/*}"/00-noise "${op}"
}

function mark_thread_seen()
{
	local src=${1} op=${2}

	cat <<__EOF__

print('')
print('-- Mark thread: ${op//\'/\\\'}')
messages = account['${src}']:is_unseen() * account['${src}']:${op}
for _, message in ipairs(messages) do
   thread = thread_messages(message)
   thread:mark_seen()
end
__EOF__
}

function canonical_filter_mail()
{
	# Move ACTIVITY mail
	move_mail "Mailing List/Canonical/canonical-kernel-team" \
			  "Canonical/Activity" \
			  "contain_subject('[ACTIVITY]')"
	move_mail "Mailing List/Canonical/core-canonical-kernel-team" \
			  "Canonical/Activity" \
			  "contain_subject('[ACTIVITY]')"

	# Move 'The Daily Bug report' mail
	move_mail "Mailing List/Ubuntu/kernel-team" \
			  "Canonical/Bugs" \
			  "contain_subject('The Daily Bug report for ')"

	# Mofe SalesForce mail
	move_mail "Mailing List/Canonical/canonical-kernel-team" \
			  "Canonical/SalesForce" \
			  "contain_subject('SFDC')"

	# Move linux-firmware mail
	move_mail "Mailing List/Ubuntu/kernel-team" \
			  "Mailing List/Ubuntu/kernel-team/linux-firmware" \
			  "contain_subject('linux-firmware')"
	move_mail "Launchpad-Message-For/canonical-kernel-team" \
			  "Launchpad-Message-For/juergh" \
			  "contain_body('Launchpad-Subscription: linux-firmware')"

	# Move noise mail
	move_mail_noise "Mailing List/Ubuntu/kernel-team" \
					"contain_from('kernel-team-bot@canonical.com')"
	move_mail_noise "Launchpad-Message-For/canonical-kernel-team" \
					"contain_subject(' -proposed tracker')"
	move_mail_noise "Launchpad-Message-For/canonical-kernel-team" \
					"contain_from('Ubuntu Kernel Bot')"
	move_mail_noise "Launchpad-Message-For/canonical-kernel-team" \
					"contain_from('Launchpad Buildd System')"

	# Mark processed patch threads as seen
	mark_thread_seen "Mailing List/Ubuntu/kernel-team" \
					 "contain_subject('APPLIED')"
	mark_thread_seen "Mailing List/Ubuntu/kernel-team" \
					 "contain_subject('NACK')"
	mark_thread_seen "Mailing List/Ubuntu/kernel-team" \
					 "contain_subject('NAK')"
}

function usage()
{
	cat <<EOF
Usage: gmail-filter-mail [-a] [-d] [-h] [-q] USERNAME

Filter Gmail mail using imapfilter.

Positional arguments:
  USERNAME       Gmail username.

Optional arguments:
  -d, --dry-run  Dump the imapfilter config file but do not run it.
  -h, --help     Show this help text and exit.
  -q, --quiet    Run imapfilter in non-verbose mode.
EOF
}

username=
dry_run=0
quiet=0

while [ $# -gt 0 ] ; do
	case "${1}" in
		-d|--dry-run)
			dry_run=1
			;;
		-h|--help)
			usage
			exit
			;;
		-q|--quiet)
			quiet=1
			;;
		-*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
		*)
			if [ -n "${username}" ] ; then
				usage
				exit 2
			fi
			username=${1}
			;;
	esac
	shift
done

if [ -z "${username}" ] ; then
	usage
	exit 2
fi

case "${username}" in
	*@canonical.com)
		filter=canonical_filter_mail
		;;
	*)
		echo "Invalid username: ${username}" >&2
		exit 1
		;;
esac

CONFIG=
trap out EXIT INT TERM HUP

cwd=$(dirname "$(readlink -e "${0}")")
CONFIG=$(mktemp)

# Create the imapfilter config file
cat <<EOF >"${CONFIG}"
$(cat "${cwd}/config/imapfilter/lib.lua")

options.timeout = 120
options.subscribe = true
options.create = true
-- options.namespace = false
options.info = false

account = IMAP {
   server = 'imap.gmail.com',
   username = '${username}',
   password = get_pass('google.com/${username}'),
   ssl = 'tls1.2',
}

$("${filter}")

print('')
EOF

# Is this a dry-run?
if [ "${dry_run}" -eq 1 ] ; then
	cat -n "${CONFIG}"
	exit
fi

opts=()
if [ "${quiet}" -eq 0 ] ; then
	opts+=("-v")
fi

imapfilter "${opts[@]}" -c "${CONFIG}"
