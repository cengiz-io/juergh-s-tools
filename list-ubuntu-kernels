#!/usr/bin/env python3
#
# List supported Ubuntu kernels
#

import argparse
import os
import yaml


def print_source(source, **kwargs):
    if kwargs.get('oneline'):
        line = source['series']['codename'] + ' ' + source['source']
    else:
        line = '  ' + source['source']
        for src in source['packages']:
            print('  ' + src)
        
    if kwargs.get('owner'):
        line += ' (' + source.get('owner', '') + ')'

#    print(line)


parser = argparse.ArgumentParser()
parser.add_argument('series', nargs='?')
parser.add_argument('-i', '--infile',
                    help='input kernel-series.yaml file')
parser.add_argument('-o', '--owner', action='store_true',
                    help='show kernel owners')
parser.add_argument('--oneline', action='store_true')
args = parser.parse_args()

if not args.infile:
    args.infile = os.environ["KERNEL_VERSIONS"] + "/info/kernel-series.yaml"
with open(args.infile) as fh:
    kernel_series = yaml.safe_load(fh)

for series, series_data in kernel_series.items():
    sources = series_data.get('sources')
    if not sources:
        continue

    supported = series_data.get('supported', False)
    development = series_data.get('development', False)
    if not supported and not development:
        continue

    codename = series_data['codename']

    first = True
    for source, source_data in sources.items():
        source_supported = source_data.get('supported', True)
        if supported and not source_supported:
            continue

        # Extend the source data with additional information
        source_data['source'] = source
        source_data['series'] = {
            'codename': codename,
        }

        if args.series:
            if args.series == codename:
                print_source(source_data, **vars(args))
            continue

        if first and not args.oneline:
            first = False
            print()
            print(series + ' - ' + codename)
        print_source(source_data, **vars(args))
