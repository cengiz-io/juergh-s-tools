#!/bin/bash -eu
#
# Import a Debian source package into the current git repo
#

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP

	rm -rf "${TMPD}"

	if [ ${rc} -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function check_tag()
{
	local tag=${1}

	if [ "${TAG}" -eq 0 ] ; then
		return
	fi

	if git tag | grep -q "^${tag}$" ; then
		if [ "${FORCE}" -eq 1 ] ; then
			git tag -d "${tag}"
		else
			echo "Tag exists already: ${tag}" >&2
			exit 1
		fi
	fi
}

function tag_from_version()
{
	local version=${1}
	local tag

	tag=${version//\~/_}

	echo "${tag}"
}

function import_dsc()
{
	local dsc=${1}
	local name version tag

	name=${dsc##*/}
	name=${name%_*}

	version=${dsc##*_}
	version=${version%.dsc}

	tag=$(tag_from_version "${version}")
	check_tag "${tag}"

	# Extract the source package and update the tree
	rm -rf "${TMPD}"
	dpkg-source --skip-patches -x "${dsc}" "${TMPD}"
	rsync -a --delete --exclude .git "${TMPD}"/ .

	# Commit the changes
	git add --force .
	git commit -s -m "Import ${name} ${version}"

	if [ "${TAG}" -eq 1 ] ; then
		git tag "${tag}"
	fi
}

function pull_source_deb()
{
	local name=${1} version=${2}

	pull-lp-source -d "${name}" "${version}" || \
		pull-debian-source -d "${name}" "${version}"
}

function usage()
{
	cat <<EOF
Usage: import-source-deb [-f] [-h] [-s NAME] [-t] DSC|VERSION [DSC|VERSION..]

Import a source package (or multiple) into the current branch of the current
git repo. Download the source package first if a version is provided rather
than a dsc file.

Positional arguments:
  VERSION            Source package version.
  DSC                Source package (dsc) file.

Optional arguments:
  -f, --force        Force the import.
  -h, --help         Show this help text and exit.
  -s, --source NAME  Source package name. If not provided, retrieves the name
                     from debian/changelog.
  -t, --no-tag       Don't tag the import.
EOF
}

FORCE=0
ver_or_dsc=()
name=
TAG=1

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-f|--force)
			FORCE=1
			;;
		-h|--help)
			usage
			exit
			;;
		-s|--source)
			shift
			name=${1}
			;;
		-t|--no-tag)
			TAG=0
			;;
		*)
			ver_or_dsc=("${@}")
			break
			;;
	esac
	shift
done

if [ "${#ver_or_dsc[@]}" -eq 0 ] ; then
	usage
	exit 2
fi

if [ -n "$(git status --porcelain)" ] ; then
    echo "Repo is not clean" >&2
    exit 1
fi

TMPD=$(mktemp -d)
trap out EXIT INT TERM HUP

for x in "${ver_or_dsc[@]}" ; do
	if [ -e "${x}" ] ; then
		dsc=${x}
	else
		tag=$(tag_from_version "${x}")
		check_tag "${tag}"

		if [ -z "${name}" ] ; then
			name=$(dpkg-parsechangelog -SSource)
		fi

		pull_source_deb "${name}" "${x}"
		dsc=${name}_${x}.dsc
	fi

	import_dsc "${dsc}"
done
