#!/bin/bash -eu

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP

	if [ ${rc} -ne 0 ] ; then
		echo "Error: Script failed" >&2
	fi

	exit "${rc}"
}

function usage()
{
	cat <<EOF
Usage: cranky-update-dependents [-f] [-h]

Update all dependent kernel packages.

Optional arguments:
  -f, --force  Update existing tags.
  -h, --help   Show this help text and exit.
EOF
}

tag_opts=()

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-f|--force)
			tag_opts=("-f")
			;;
		-h|--help)
			usage
			exit
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

while IFS= read -r path ; do
	cd "${path}"

	if [ "$(cranky shell-helper tree-type)" = "main" ] ; then
		continue
	fi

	echo "${path}"

	branch=$(git branch | grep " cranky/" | sed -e 's,.* cranky/,,')
	git checkout cranky/"${branch}"

	tag=$(git describe --exact-match HEAD 2>/dev/null || echo)
	if [ -z "${tag}" ] ; then
		echo "Current HEAD is untagged" >&2
		exit 1
	fi

	git fetch --tags

	# Prevent reruns
	if ! git ls-remote --tags origin | grep -q "refs/tags/${tag}$" ; then
		echo "HEAD tag does not exist remotely" >&2
		exit 1
	fi

	tag_base=$(echo "${tag}" | \
				   sed -e 's/_[0-9\.]*$//' -e 's/[0-9]\+\.[0-9]\+$//')
	tag_latest=$(git tag | grep "${tag_base}" | sort -V | tail -1)

	git clean -dxf
	git merge --ff-only "${tag_latest}"

	cranky update-dependent
	cranky tag "${tag_opts[@]}"

	echo
	git --no-pager log origin/"${branch}"~1..
	echo

done < <(cranky shell-helper source-packages-path)

echo "Success: Updated all dependents"
