#!/usr/bin/env python3
#
# Create a Jira issue(s) from a Trello card(s)
#

import argparse
import json
import os
import subprocess
import sys

from jira import JIRA

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Create a Jira issue from a Trello card.')
    parser.add_argument('-c', '--component', required=True, help='Jira component name.')
    parser.add_argument('-d', '--dry-run', action='store_true')
    parser.add_argument('-p', '--project', default='KERN', help='Jira project key. ' +
                        'If not provided, defaults to \'KERN\'')
    parser.add_argument('-s', '--status', default='Notice', help='Jira issue status. ' +
                        'If not provided, defaults to \'Notice\'')
    parser.add_argument('card', nargs='+',
                        help='Trello card ID to create an issue from.')
    args = parser.parse_args()

    jira_server = 'https://warthogs.atlassian.net'
    jira_options = {
        'server': jira_server,
    }

    jira = JIRA(jira_options)

    so_trello = os.environ.get('SO_TRELLO_BIN', '/srv/git/so-trello/bin/so-trello')

    for card_id in args.card:
        # Pull the card data from Trello
        output = subprocess.check_output([so_trello, 'card',
                                          '--card', card_id,
                                          '--raw', 'json']).decode('UTF-8')
        card = json.loads(output)
        output = subprocess.check_output([so_trello, 'card-attachments',
                                          '--card', card_id,
                                          '--raw', 'json']).decode('UTF-8')
        card_attachments = json.loads(output)
        output = subprocess.check_output([so_trello, 'card-actions',
                                          '--card', card_id,
                                          '--raw', 'json']).decode('UTF-8')
        card_actions = json.loads(output)

        # Populate the necessary fields for the new Jira issue
        jira_summary = card['name'][:255]   # Jira summary can't exceed 255 chars
        jira_fields = {
            'components': [
                {
                    'name': args.component,
                },
            ],
            'description': card['desc'],
            'issuetype': {
                'name': 'Task',
                'subtask': False,
            },
            'project': {
                'key': args.project,
            },
            'summary': jira_summary,
        }

        # Create the Jira issue
        if args.dry_run:
            print('[dry-run] Create Jira issue ({})'.format(jira_fields))
        else:
            jira_issue = jira.create_issue(fields=jira_fields)
            print('{}/browse/{} ({})'.format(jira_server, jira_issue.key, jira_summary))

        # Add attachments
        for attachment in card_attachments:
            simple_link = {
                'url': attachment['url'],
                'title': attachment['name'],
            }
            if args.dry_run:
                print('[dry-run] Add link ({})'.format(simple_link))
            else:
                jira.add_simple_link(jira_issue, simple_link)

        # Add comments
        for action in reversed(card_actions):
            if action['type'] == 'commentCard':
                comment = action['data']['text']
                if args.dry_run:
                    print('[dry-run] Add comment ({})'.format(comment))
                else:
                    jira.add_comment(jira_issue, comment)

        # Transition the issue to the provided status
        if args.dry_run:
            print('[dry-run] Transition issue ({})'.format(args.status))
        else:
            # Find the transition ID for the provided status
            jira_transition = None
            for t in jira.transitions(jira_issue):
                if args.status.lower() == t['name'].lower():
                    jira_transition = t['id']
                    break
            if jira_transition is None:
                print('No transition found for status: {}'.format(args.status),
                      file=sys.stderr)
                sys.exit(1)
            jira.transition_issue(jira_issue, jira_transition)
