#!/usr/bin/env python3
#
# Manage ADT tests and results
#


import argparse
import json
import sys

import natsort
import prettytable
import requests

try:
    import browser_cookie3
except ModuleNotFoundError:
    print('Failed to import browser_cookie3. Consider installing it like:\n' +
          '  $ pip3 install browser_cookie3', file=sys.stderr)
    sys.exit(1)

# -----------------------------------------------------------------------------
# Helper functions

def _dec(name, *args, **kwargs):
    def _decorator(func):
        # Because of the sematics of decorator composition if we just append
        # to the options list positional options will appear to be backwards.
        func.__dict__.setdefault(name, []).insert(0, (args, kwargs))
        return func
    return _decorator

def add_help(*args, **kwargs):
    return _dec('help', *args, **kwargs)

def add_arg(*args, **kwargs):
    return _dec('arg', *args, **kwargs)

def error(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def get_browser_cookies():
    '''
    Return the browser cookies for autopkgtest.ubuntu.com
    '''
    cookies = browser_cookie3.firefox(domain_name='autopkgtest.ubuntu.com')
    #    try:
    #        cookies = browser_cookie3.chrome(domain_name=domain)
    #    except AttributeError:
    #        cookies = None
    return cookies

def handle_to_series_source(handle):
    '''
    Return a (series, source) tuple for the provided handle
    '''
    for delim in (':', '/'):
        if delim in handle:
            series, source = handle.split(delim, 1)
            if not source.startswith('linux'):
                source = 'linux' + source
            return series, source

    # No delimiter in handle so assume handle is just the series
    return handle, 'linux'

def print_header(url, series, source, version=None, timestamp=None):
    '''
    Print a header
    '''
    print('URL:       {}'.format(url))
    print('Series:    {}'.format(series))
    print('Source:    {}'.format(source))
    if version is not None:
        print('Version:   {}'.format(version))
    if timestamp is not None:
        print('Timestamp: {} UTC'.format(timestamp))
    print()

def colored_status(status):
    '''
    Return a colored status string
    '''
    nocolor = '\033[0m'
    green = '\033[38;5;28m'
    yellow = '\033[38;5;226m'
    orange = '\033[38;5;208m'
    lightgreen = '\033[38;5;121m'
    tomato = '\033[38;5;203m'
    red = '\033[38;5;196m'
    color = {
        'GOOD': green,
        'NONE': green,
        'RUN': yellow,
        'MISS': yellow,
        'SKIP': yellow,
        'FAIL': orange,
        'NEUTRAL': orange,
        'NEVER': lightgreen,
        'REGR': tomato,
        'REGN': red,
    }
    return color.get(status, nocolor) + status + nocolor

def print_table(fmt, data):
    '''
    Prtty print a table
    '''
    fmt_map = {
        'p': ['Package', 'package'],
        'a': ['Arch', 'arch'],
        's': ['Status', 'status'],
        'n': ['Annotation', 'annotation'],
        'l': ['Log URL ', 'log_url'],
        'f': ['Artifacts URL', 'artifacts_url'],
        'r': ['Retry URL', 'retry_url'],
    }
    header = [fmt_map[f][0] for f in fmt]
    table = prettytable.PrettyTable()
    table.field_names = header
    for row in list(data):  # Copy the data list
        # Color code the status
        if 's' in fmt and row.get('status'):
            row['status'] = colored_status(row['status'])
        # Add the row to the table
        table.add_row([row.get(fmt_map[f][1], '') for f in fmt])
    table.align = 'l'
    print(table)

def table_format_help(default):
    return ('Table formatter string. Specifies the columns to display: ' +
            '(p)ackage, (a)arch, (s)tatus, a(n)otation, (l)og, arti(f)acts, ' +
            '(r)etry_url. If not provided, defaults to \'' + default + '\'.')

# -----------------------------------------------------------------------------
# ADT test results class

class ADTResults():
    def __init__(self, series, source, debug=False, ppa=None):
        self.series = series
        self.source = source
        self.debug = debug
        self.ppa = ppa

        ppa_path = 'canonical-kernel-team--{}/'.format(ppa) if ppa else ''
        self.adt_url = 'https://people.canonical.com/~kernel/status/' + \
            'adt-matrix/' + ppa_path
        self.adt_url_html = self.adt_url + \
            '{}-{}.html'.format(series, source)
        self.adt_url_json = self.adt_url + \
            '{}-{}-detail-results-data.json'.format(series, source)

        self.results = None       # ADT test results
        self.versions = None      # List of all kernel versions
        self.packages = None      # List of all packages
        self.arches = None        # List of all architectures
        self.timestamp = None     # Timestamp of last ADT matrix update

        self._get_results()
        self._get_timestamp()

    def _get_results(self):  # pylint: disable=R0915
        '''
        Get ADT results
        '''
        resp = requests.get(self.adt_url_json)
        if resp.status_code != 200:
            error('Failed to get results ({})'.format(resp.status_code))
            sys.exit(1)
        results = resp.json()

        if self.debug:
            print('+++ Test results:')
            print(json.dumps(results, indent=4, sort_keys=True))

        # Sanity check
        if ((results['series'] != self.series or
             results['source'] != self.source)):
            error('Mismatched series and/or source')
            sys.exit(1)

        # Rearrange the test results and determine all versions, packages and
        # architectures
        # self.results: version -> package -> arch -> test_result
        self.results = {}
        all_versions = {}
        all_packages = {}
        all_arches = {}
        for version, arches in results['history'].items():
            all_versions[version] = 1
            self.results[version] = {}
            for arch, results in arches.items():
                all_arches[arch] = 1
                for result in results:
                    package = result['package']
                    all_packages[package] = 1
                    if package not in self.results[version]:
                        self.results[version][package] = {}
                    self.results[version][package][arch] = result

        if self.debug:
            print('+++ Rearranged results:')
            print(json.dumps(self.results, indent=4, sort_keys=True))

        # TODO: This needs to be Debian package version sorted
        self.versions = natsort.natsorted(list(all_versions))
        self.packages = sorted(list(all_packages))
        self.arches = sorted(list(all_arches))

        # Fill in missing test results, source package information and add
        # URLs for the log and artifacts
        for version in self.versions:
            for package in self.packages:
                if package not in self.results[version]:
                    self.results[version][package] = {}
                for arch in self.arches:
                    if arch not in self.results[version][package]:
                        # Add a dummy result for missing tests
                        self.results[version][package][arch] = {
                            'arch': arch,
                            'package': package,
                            'status': '----',
                        }
                    result = self.results[version][package][arch]

                    # Add source package information
                    result.update({
                        'series': self.series,
                        'source': self.source,
                        'source_version': version,
                    })

                    # Add links for the log and artifacts
                    status_link = result.get('status_link')
                    if status_link:
                        result.update({
                            'log_url': status_link + 'log.gz',
                            'artifacts_url': status_link + 'artifacts.tar.gz',
                        })

        # The newest source package version
        newest_version = self.versions[-1]

        # Find a valid retry_url for the newest version
        retry_url = None
        for result in self.get_results(version=newest_version):
            retry_url = result.get('retry_url')
            if retry_url:
                params = dict(param.split('=') for
                              param in retry_url.split('?')[1].split('&'))
                retry_url = retry_url.replace('arch=' + params['arch'],
                                              'arch=__ARCH__')
                retry_url = retry_url.replace('package=' + params['package'],
                                              'package=__PACKAGE__')
                break
        if not retry_url:
            error('Unable to find a valid retry URL')

        # Add  missing retry URLs to test results for the newest version
        if retry_url:
            for result in self.get_results(version=newest_version):
                url = retry_url
                url = url.replace('__ARCH__', result['arch'])
                url = url.replace('__PACKAGE__', result['package'])
                result.update({
                    'retry_url': url,
                })

        if self.debug:
            print('+++ Updated results:')
            print(json.dumps(self.results, indent=4, sort_keys=True))

    def _get_timestamp(self):
        '''
        Get the timestamp of the last ADT matrix update
        '''
        resp = requests.get(self.adt_url_html)
        if resp.status_code != 200:
            error('Failed to get timestamp ({})'.format(resp.status_code))
            sys.exit(1)

        self.timestamp = ''
        for line in resp.text.split('\n'):
            if 'ADT Test Matrix for linux-meta' in line:
                self.timestamp = line.split('(')[1].split(')')[0]
                break
        if not self.timestamp:
            error('Unable to find ADT matrix update timestamp')

    def get_results(self, version=None, package=None, arch=None,
                    status=None, fmt='list'):
        '''
        Return the results for the provided selectors
        '''
        versions = [version] if version else self.versions
        packages = [package] if package else self.packages
        arches = [arch] if arch else self.arches

        results = {}
        results_list = []
        for version in versions:  # pylint: disable=R1704
            tmp_list = []
            for package in packages:  # pylint: disable=R1704
                for arch in arches:  # pylint: disable=R1704
                    result = self.results[version][package][arch]
                    if (not status) or (status and status == result['status']):
                        if version not in results:
                            results[version] = {}
                        if package not in results[version]:
                            results[version][package] = {}
                        results[version][package][arch] = result
                        tmp_list.append(result)
            results_list.append(tmp_list)

        if self.debug:
            print('+++ Selected results:')
            print(json.dumps(results, indent=4, sort_keys=True))

        if fmt == 'list':
            if len(results_list) == 1:
                return results_list[0]
            return results_list

        if fmt == 'dict':
            return results

        error('Invalid format: {}'.format(fmt))
        return None

# -----------------------------------------------------------------------------
# Autopkgtest class

class AutoPkgTest():
    def __init__(self, series, source, debug=False):
        self.series = series
        self.source = source
        self.debug = debug

        self.tests = None       # autopkgtest test status in dict form
        self.tests_list = None  # autopkgtest test status in list form
        self._get_tests()       # Get the above

    def _get_tests(self):  # pylint: disable=R0915
        '''
        Get autopkgtest status of running and queued tests
        '''
        self.tests = {}

        # Get running tests
        resp = requests.get('https://autopkgtest.ubuntu.com/static/' +
                            'running.json')
        if resp.status_code != 200:
            error('Failed to get running tests ({})'.format(resp.status_code))
            sys.exit(1)
        running = resp.json()

        if self.debug:
            print('+++ Running tests:')
            print(json.dumps(running, indent=4, sort_keys=True))

        # Rearrange the running tests and filter out tests for different series
        # and sources
        # self.tests: package -> arch -> [test details]
        for package, runhashes in running.items():  # pylint: disable=R1702
            for _runhash, releases in runhashes.items():
                for release, arches in releases.items():
                    if release != self.series:
                        continue
                    for arch, test_details in arches.items():
                        for trigger in test_details[0].get('triggers', []):
                            if trigger.startswith(self.source + '/'):
                                if package not in self.tests:
                                    self.tests[package] = {}
                                if arch not in self.tests[package]:
                                    self.tests[package][arch] = []
                                details = dict(zip(['params', 'duration',
                                                    'logtail', 'status'],
                                                   test_details + ['RUNNING']))
                                self.tests[package][arch].append(details)
                                break

        # Get queued tests
        resp = requests.get('https://autopkgtest.ubuntu.com/queues.json')
        if resp.status_code != 200:
            error('Failed to get queued tests ({})'.format(resp.status_code))
            sys.exit(1)
        queued = resp.json()

        if self.debug:
            print('+++ Queued tests:')
            print(json.dumps(queued, indent=4, sort_keys=True))

        # Rearrange the queued tests
        # self.tests: package -> arch -> [test details]
        arches = queued.get('ubuntu', {}).get(self.series, {})
        for arch, test_list in arches.items():
            for test in test_list:
                package, details = test.replace('\n', ' ').split(' ', 1)
                details = json.loads(details)
                for trigger in details['triggers']:
                    if trigger.startswith(self.source + '/'):
                        if package not in self.tests:
                            self.tests[package] = {}
                        if arch not in self.tests[package]:
                            self.tests[package][arch] = []
                        details['status'] = 'QUEUED'
                        self.tests[package][arch].append(details)
                        break

        if self.debug:
            print('+++ Tests dict:')
            print(json.dumps(self.tests, indent=4, sort_keys=True))

        # Create the tests list
        self.tests_list = []
        for package, arches in self.tests.items():
            for arch, details in arches.items():
                status = {
                    'RUNNING': 0,
                    'QUEUED': 0,
                }
                for detail in details:
                    if detail['status'] == 'RUNNING':
                        status['RUNNING'] += 1
                    elif detail['status'] == 'QUEUED':
                        status['QUEUED'] += 1
                self.tests_list.append({
                    'arch': arch,
                    'package': package,
                    'status': status,
                    'details': details,
                })

        if self.debug:
            print('+++ Tests list:')
            print(json.dumps(self.tests_list, indent=4, sort_keys=True))

    def get_tests(self, package, arch):
        '''
        Return a list of tests
        '''
        return self.tests.get(package, {}).get(arch, [])

# -----------------------------------------------------------------------------
# Subcommands

@add_help('Show ADT test results.')
@add_arg('version', nargs='?',
         help='Show ADT test results for the provided kernel version. ' +
         'If no version is provided, shows the results for the last ' +
         '(newest) version. Can also be an index (0: first version, -1: ' +
         'last version, ...).')
@add_arg('-t', '--tests', action='store_true',
         help='Show running and queued test status.')
@add_arg('-f', '--format', default='pasn', help=table_format_help('pasn'))
def do_results(args, results):
    if args.version:
        found = False
        for version in results.results:
            if args.version == version:
                found = True
                break
        if not found:
            try:
                version = results.versions[int(args.version)]
                found = True
            except (ValueError, IndexError):
                pass
        if not found:
            error('Invalid version: {}'.format(args.version))
            sys.exit(1)
    else:
        version = results.versions[-1]

    results_list = results.get_results(version=version)

    # Query autopktest.ubuntu.com for test status
    if args.tests and version == results.versions[-1]:
        apt = AutoPkgTest(results.series, results.source, args.debug)
        for i, result in enumerate(results_list):
            test_status = ''
            for test in apt.get_tests(result['package'], result['arch']):
                if test['status'] == 'RUNNING':
                    test_status = ' (R)'
                elif test_status == '' and test['status'] == 'QUEUED':
                    test_status = ' (Q)'
            result['status'] += test_status
            results_list[i] = result

    print_header(results.adt_url_html, results.series, results.source,
                 version=version, timestamp=results.timestamp)
    print_table(args.format, results_list)

@add_help('Retry ADT tests.',
          help='Retry ADT tests.')
@add_arg('-d', '--dry-run', action='store_true',
         help='Only show which tests would be retried.')
@add_arg('status_package', metavar='status|package', default='MISS', nargs='?',
         help='Either a test status or a package name. If a test status, ' +
         'retry all packages showing the provided status. If a package name, ' +
         'retry the provided package. If not provided, retry all packages ' +
         'showing a \'MISS\' test status.')
@add_arg('-f', '--format', default='pasr', help=table_format_help('pasr'))
@add_arg('-t', '--trigger', action='append', help='Add an additional ' +
         'trigger. Can be provided multiple times.')
def do_retry(args, results):
    version = results.versions[-1]
    package = None
    arch = None
    status = None

    if args.status_package.isupper() or args.status_package == '----':
        status = args.status_package
    elif '/' in args.status_package:
        package, arch = args.status_package.split('/')
    else:
        package = args.status_package

    retry_list = results.get_results(version=version, package=package,
                                     arch=arch, status=status)

    # Add the additional triggers
    if args.trigger:
        for result in retry_list:
            result['retry_url'] += '&trigger=' + \
                '&trigger='.join([t.replace('/', '%2F') for t in args.trigger])

    print_header(results.adt_url_html, results.series, results.source,
                 version=version)
    print_table(args.format, retry_list)

    if args.dry_run:
        print('\nDry-run, exiting...')
        return

    # Get the auth cookies from the browsers
    cookies = get_browser_cookies()

    # Retry the tests
    print()
    for result in retry_list:
        print('Retry {}/{} ... '.format(result['package'], result['arch']),
              end='', flush=True)
        retry_url = result['retry_url']
        resp = requests.get(retry_url, cookies=cookies)
        if resp.status_code == 200:
            if 'Log in with Ubuntu SSO' in resp.text:
                print('Failed (no auth)')
                error('You need to log in at: {}'.format(
                    retry_url.split('?')[0]))
                sys.exit(1)
            print('OK')
        else:
            print('Failed ({})'.format(resp.status_code))

@add_help('Show kernel versions.')
def do_versions(_args, results):
    print(' '.join(results.versions))

@add_help('Show running and queued autopkgtest tests.')
def do_tests(args, results):
    apt = AutoPkgTest(results.series, results.source, args.debug)

    tests = []
    for test in apt.tests_list:
        tests.append({
            'package': test['package'],
            'arch': test['arch'],
            'status': test['status'],
        })

    print_header(results.adt_url_html, results.series, results.source)
    print_table('pas', tests)

# -----------------------------------------------------------------------------
# Main entry point

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("handle", help='Kernel handle in the form ' +
                        '\'series:source\'.')
    parser.add_argument('--debug', action='store_true',
                        help='Enable debug mode.')
    parser.add_argument('-p', '--ppa', choices=('bootstrap', 'unstable'),
                        help='Process ADT results for kernels from the ' +
                        'provided PPA.')

    # Add subparsers for the subcommands and walk through the 'do_' functions
    subparsers = parser.add_subparsers(dest='subcommand', title='subcommands',
                                       required=True)
    module = sys.modules[__name__]
    for attr in (a for a in dir(module) if a.startswith('do_')):
        cmd_name = attr[3:].replace('_', '-')
        cmd_cb = getattr(module, attr)
        cmd_help = getattr(cmd_cb, 'help')[0][0][0]
        cmd_args = getattr(cmd_cb, 'arg', [])

        sparser = subparsers.add_parser(cmd_name, help=cmd_help,
                                        description=cmd_help, add_help=False)
        sparser.add_argument('-h', '--help', action='help')
        for (args, kwargs) in cmd_args:
            sparser.add_argument(*args, **kwargs)
        sparser.set_defaults(func=cmd_cb)

    # Parse the arguments
    args = parser.parse_args()

    # Resolve the handle and get the ADT results
    series, source = handle_to_series_source(args.handle)
    if not source.startswith('linux-meta'):
        source = source.replace('linux', 'linux-meta')
    results = ADTResults(series, source, args.debug, args.ppa)

    # Call the subcommand
    args.func(args, results)

if __name__ == '__main__':
    main()
