#!/bin/bash -eu

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function pr_banner()
{
	local txt

	if [ -z "${__COLS:-}" ] ; then
		__COLS=$(tput cols)
	fi
	txt=${*}$(printf "%${__COLS}s")
	echo -e "\033[48;5;160m${txt::${__COLS}}\033[0m"
}

function run()
{
	echo
	pr_banner "${*}"
	if [ "${DRY_RUN}" -eq 1 ] ; then
		echo "${*}"
		echo "Skip (dry-run)"
	else
		"${@}"
	fi
}

function source_debian_env()
{
	if [ -z "${DEBIAN:-}" ] ; then
		# shellcheck disable=SC1091
		. debian/debian.env
	fi
}

# checkout --------------------------------------------------------------------

# shellcheck disable=SC2034
checkout_opt_args=(
	"[-r] || -r, --rebase || Rebase onto the latest tag if HEAD is untagged."
)

function do_checkout()
{
	local args

	args=()
	if [ "${REBASE}" -eq 1 ] ; then
		args+=("--rebase")
	fi

	run cranky-checkout -u "${args[@]}"
}

# fix -------------------------------------------------------------------------

function do_fix()
{

	source_debian_env

	series=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S distribution)
	if [ "${series}" = "UNRELEASED" ] ; then
		echo "Invalid series: ${series}" >&2
		exit 1
	fi

	run cranky fix
}

# rebase ----------------------------------------------------------------------

function do_rebase()
{
	run cranky rebase
}

# open ------------------------------------------------------------------------

function do_open()
{
	run git clean -dxf
	run cranky open
}

# configs ---------------------------------------------------------------------

function do_configs()
{
	run cranky updateconfigs
}

# link ------------------------------------------------------------------------

# shellcheck disable=SC2034
link_opt_args=(
	"[-r] || -r, --rerun || Rerun the commands."
	"[-s SRU_CYCLE] || -s, --sru-cycle SRU_CYCLE || SRU cycle name (2022.05.30-1, d2022.10.12-2, ...)."
)

function do_link()
{
	local args

	args=()
	if [ "${RERUN}" -eq 1 ] ; then
		args+=("--re-run")
	fi
	if [ -n "${SRU_CYCLE}" ] ; then
		args+=("--sru-cycle" "${SRU_CYCLE}")
	fi

	run cranky link-tb "${args[@]}"
}

# dkms ------------------------------------------------------------------------

function do_dkms()
{
	if [ -e ./update-dkms-versions ] ; then
		run ./update-dkms-versions
	fi
}

# close -----------------------------------------------------------------------

# shellcheck disable=SC2034
close_opt_args=(
	"[-r] || -r, --rerun || Rerun the commands."
)

function do_close()
{
	local args

	args=()
	if [ "${RERUN}" -eq 1 ] ; then
		args+=("--force")
	fi

	run cranky close
	run cranky tag "${args[@]}"
}

# dependents ------------------------------------------------------------------

# shellcheck disable=SC2034
dependents_opt_args=(
	"[-r] || -r, --rerun || Rerun the commands."
)

function do_dependents()
{
	local args

	args=()
	if [ "${RERUN}" -eq 1 ] ; then
		args+=("--force")
	fi

	run cranky-update-dependents "${args[@]}"
}

# verify ----------------------------------------------------------------------

function do_verify()
{
	run cranky-verify-release-ready
}

# build -----------------------------------------------------------------------

# shellcheck disable=SC2034
build_pos_args=(
	"POCKET || POCKET || Pocket containing the previous source package."
)

function do_build()
{
	run cranky-build-sources -f "${POCKET}"
}

# review ----------------------------------------------------------------------

# shellcheck disable=SC2034
review_pos_args=(
	"POCKET || POCKET || Pocket containing the previous source package."
)

function do_review()
{
	run cranky-review-sources "${POCKET}"
	run cranky-reduce-debdiff

	run cranky-review-sources | less
	run review-debdiff -r | less
}

# cbd -------------------------------------------------------------------------

# shellcheck disable=SC2034
cbd_pos_args=(
	"[-- CBD_ARGS...] || CBD_ARGS || Additional CBD arguments, e.g., -o amd64 -o generic."
)

function do_cbd()
{
	run cbd-cli build "${CBD_ARGS[@]}"
}

# push ------------------------------------------------------------------------

function do_push()
{
	local tmp

	run cranky-push-all --dry-run
	echo -n "Push (y|n)? "
	read -r tmp
	if [ "${tmp}" != "y" ] ; then
        exit
	fi

	run cranky-push-all
}

# dput ------------------------------------------------------------------------

# shellcheck disable=SC2034
dput_pos_args=(
	"PPA || PPA || Build PPA."
)

function do_dput()
{
	run cranky dput-sources "${PPA}"
}

# ----------------------------------------------------------------------------
# Usage

function usage()
{
	echo -n "Usage: $(basename "${0}")"
	for arg in "${OPT_ARGS[@]}" ; do
		echo -n " ${arg%% || *}"
	done
	for arg in "${POS_ARGS[@]}" ; do
		echo -n " ${arg%% || *}"
	done
	echo

	echo
	echo "Ubuntu kernel source package preparation, build, review and" \
		 "upload helper."
	echo

	if [ ${#POS_ARGS[@]} -ne 0 ] ; then
		echo "Positional arguments:"
		for arg in "${POS_ARGS[@]}" ; do
			arg=${arg#* || }
			printf "  %-26s %s\n" "${arg%% || *}" "${arg#* || }"
		done
		echo
	fi

	echo "Optional arguments:"
	for arg in "${OPT_ARGS[@]}" ; do
		arg=${arg#* || }
		printf "  %-26s %s\n" "${arg%% || *}" "${arg#* || }"
	done
}

# ----------------------------------------------------------------------------
# Main entry point

DRY_RUN=0
help=0
SRU_CYCLE=
RERUN=0
REBASE=0

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-d|--dry-run)
			DRY_RUN=1
			;;
		-h|--help)
			help=1
			;;
		-s|--sru-cycle)
			shift
			SRU_CYCLE=${1}
			;;
		-r)
			REBASE=1
			RERUN=1
			;;
		--rebase)
			REBASE=1
			;;
		--rerun)
			RERUN=1
			;;
		--)
			shift
			break
			;;
		-*)
			echo "Invalid argumennt: ${1}" >&2
			exit 2
			;;
		*)
			break
			;;
	esac
	shift
done

# Collect the commands from the link name
readarray -t cmds < <(echo "${0##*--}" | tr "-" "\n")

OPT_ARGS=(
	"[-d] || -d, --dry-run || "
	"[-h] || -h, --help || Show this help text and exit."
)

POS_ARGS=()

# Collect the optional and positional arguments for the selected commands
for cmd in "${cmds[@]}" ; do
	# shellcheck disable=SC2178
	declare -n args=${cmd}_opt_args
	OPT_ARGS+=("${args[@]}")

	# shellcheck disable=SC2178
	declare -n args=${cmd}_pos_args
	POS_ARGS+=("${args[@]}")
done

# Sort the arguments and weed out duplicates
readarray -t OPT_ARGS < <(printf "%s\n" "${OPT_ARGS[@]}" | sort -u)
readarray -t POS_ARGS < <(printf "%s\n" "${POS_ARGS[@]}" | sort -u)

# Process the positional arguments
for arg in "${POS_ARGS[@]}" ; do
	case "${arg%% || *}" in
		POCKET)
			if [ ${#} -eq 0 ] ; then
				usage
				exit 2
			fi
			POCKET=${1}
			;;
		PPA)
			if [ ${#} -eq 0 ] ; then
				usage
				exit 2
			fi
			PPA=${1}
			;;
		"[-- CBD_ARGS...]")
			CBD_ARGS=("${@}")
			while [ ${#} -gt 0 ] ; do shift ; done
			break
			;;
		*)
			echo "Unsupported argument name: ${arg}" >&2
			exit 1
			;;
	esac
	shift
done

if [ ${#} -gt 0 ] || [ ${help} -eq 1 ] ; then
	usage
	exit 2
fi

trap out EXIT INT TERM HUP

# Run the command(s)
for cmd in "${cmds[@]}" ; do
	do_"${cmd}"
done
