#!/bin/bash -eu
#
# Create a debdiff file
#

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-h] [PREVIOUS_VERSION]

Create a debdiff file.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

prev_version=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			if [ -n "${prev_version}" ] ; then
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			prev_version=${1}
			;;
	esac
	shift
done

name=$(dpkg-parsechangelog -S Source)
curr_version=$(dpkg-parsechangelog -S Version)
curr_base=../${name}_${curr_version}

if [ -z "${prev_version}" ] ; then
	prev_version=$(dpkg-parsechangelog -S Version -o 1 -c 1)
fi
prev_base=../${name}_${prev_version}

if [ -e "${prev_base}"_source.changes ] && [ -e "${curr_base}"_source.changes ] ; then
	prev=${prev_base}_source.changes
	curr=${curr_base}_source.changes
elif [ -e "${prev_base}".dsc ] && [ -e "${curr_base}".dsc ] ; then
	prev=${prev_base}.dsc
	curr=${curr_base}.dsc
else
	echo "Current and/or previous .dsc or .changes files not found" >&2
	exit 1
fi

{
	# Add a 'header' that identifies the previous and current dsc
	echo "# Previous: ${prev##*/}"
	echo "# Current:  ${curr##*/}"

	# Generate the debdiff
	debdiff "${prev}" "${curr}"
} > "${curr_base}".debdiff || true

echo "Created ${curr_base}".debdiff
