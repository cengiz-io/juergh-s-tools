#!/bin/bash -eu
#
# Push branches and tags
#

function push_all()
{
	local tag branch tracking tracking_remote tracking_branch force
	local push_tag push_branch push_branch_opts

	tag=$(git describe --exact-match HEAD 2>/dev/null || true)
	branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || true)
	tracking=$(git rev-parse --abbrev-ref '@{u}' 2>/dev/null || true)
	tracking_remote=${tracking%%/*}
	tracking_branch=${tracking#*/}

	push_branch_opts=()

	force="No"
	if [ -e debian/debian.env ] ; then
		# shellcheck disable=SC1091
		. debian/debian.env
		if [ -e "${DEBIAN}"/etc/update.conf ] ; then
			push_branch_opts+=("--force-with-lease")
			force="Yes"
		fi
	fi

	if [ "${REMOTE}" = "${tracking_remote}" ] ; then
		push_branch_opts+=("${branch}:${tracking_branch}")
	fi

	echo "${PWD}"
	echo "  Remote:         ${REMOTE}"
	echo "  Tag:            ${tag}"
	echo "  Current branch: ${branch}"
	echo "  Tracking:       ${tracking}"
	echo "  Force push:     ${force}"

	if [ -z "${tag}" ] || [ -z "${branch}" ] ; then
		echo "Head commit not tagged or not on a branch" >&2
		echo
		return
	fi

	push_tag=(git push "${REMOTE}" "${tag}")
	push_branch=(git push "${REMOTE}" "${push_branch_opts[@]}")

	echo "${push_tag[@]}"
	if [ "${DRY_RUN}" -eq 0 ] ; then
		"${push_tag[@]}" || true
	fi

	echo "${push_branch[@]}"
	if [ "${DRY_RUN}" -eq 0 ] ; then
		"${push_branch[@]}" || true
	fi

	echo
}

function usage()
{
    cat <<EOF
Usage: cranky-push-all [-c] [-h]

Push branches and tags.

Optional arguments:
  -c, --current  Push only the current repo.
  -d, --dry-run  Show what would be pushed but don't actually do it.
  -h, --help     Show the current help text and exit.
EOF
}

current=0
DRY_RUN=0
REMOTE=origin

while [ ${#} -gt 0 ] ; do
    case "${1}" in
		-c|--current)
			current=1
			;;
		-d|--dry-run)
			DRY_RUN=1
			;;
        -h|--help)
            usage
            exit
            ;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if [ -e snapcraft.yaml ] && ! [ -e MAINTAINERS ] ; then
	# Kernel snap repo
	current=1
fi

if [ ${current} -eq 1 ] ; then
	push_all
else
	while IFS= read -r path ; do
		cd "${path}"
		push_all
	done < <(cranky shell-helper source-packages-path)
fi
