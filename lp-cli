#!/usr/bin/env python3
#
# CLI interface to Launchpad
#

import argparse
import sys

from launchpadlib.launchpad import Launchpad

# -----------------------------------------------------------------------------
# Helper functions

def _dec(name, *args, **kwargs):
    def _decorator(func):
        # Because of the sematics of decorator composition if we just append
        # to the options list positional options will appear to be backwards.
        func.__dict__.setdefault(name, []).insert(0, (args, kwargs))
        return func
    return _decorator


def add_help(*args, **kwargs):
    return _dec('help', *args, **kwargs)

def add_arg(*args, **kwargs):
    return _dec('arg', *args, **kwargs)

def from_handle(handle):
    '''
    Return a (series, source) tuple for the provided handle
    '''
    for delim in (':', '/'):
        if delim in handle:
            series, source = handle.split(delim)
            return series, source

    print('Invalid handle: {}'.format(handle), file=sys.stderr)
    sys.exit(2)

def pocket_list(pocket, all_pockets):
    '''
    Return a list of pockets
    '''
    if pocket:
        return [args.pocket.capitalize()]
    if all_pockets:
        return ['Proposed', 'Updates', 'Release']
    return ['Updates', 'Release']

# -----------------------------------------------------------------------------
# Launchpad helpers

def lp_get_source(lp, handle, pockets):
    '''
    Return the latest source of the provided handle and pocket list
    '''
    series, source = from_handle(handle)
    lp_archive = lp.archives.getByReference(reference='ubuntu')
    lp_series = lp.distributions['ubuntu'].getSeries(name_or_version=series)
    for pocket in pockets:
        lp_sources = lp_archive.getPublishedSources(source_name=source,
                                                    distro_series=lp_series,
                                                    pocket=pocket,
                                                    exact_match=True,
                                                    order_by_date=True,
                                                    status='Published')
        if lp_sources:
            return lp_sources[0]
    return None

def lp_get_binaries(lp, handle, pockets):
    '''
    Return the binaries of the provided source handle and pocket list
    '''
    source = lp_get_source(lp, handle, pockets)
    if source:
        return source.getPublishedBinaries()
    return []

# -----------------------------------------------------------------------------
# Subcommands

@add_help('Query a bug')
@add_arg('lp_bug', type=int, nargs='+', help='Launchpad bug number')
@add_arg('-a', '--attr', action='append', help='Bug attribute')
def do_query_bug(args):
    for lp_bug in args.lp_bug:
        bug = args.lp.bugs[lp_bug]
        if not args.attr:
            print('Valid attributes: {}'.format(bug.lp_attributes))
            return
        for attr in args.attr:
            if attr not in bug.lp_attributes:
                print('Invalid attribute: {}'.format(attr))
                continue
            print('{}.{}: {}'.format(lp_bug, attr, getattr(bug, attr)))

@add_help('Subscribe a person to a bug')
@add_arg('lp_bug', type=int, help='Launchpad bug number')
@add_arg('lp_id', help='Launchpad ID of person to subscribe to bug')
def do_subscribe_bug(args):
    bug = args.lp.bugs[args.lp_bug]
    person = args.lp.people[args.lp_id]
    bug.subscribe(person=person)

@add_help('Nominate a bug for a series')
@add_arg('lp_bug', type=int, help='Launchpad bug number')
@add_arg('-s', '--series', required=True, help='Series name')
def do_nominate_bug(args):
    bug = args.lp.bugs[args.lp_bug]
    series = None
    for s in args.lp.distributions["Ubuntu"].series_collection:
        if s.name == args.series:
            series = s
            break
    if not series:
        print('Invalid series: {}'.format(args.series))
        return
    nomination = bug.addNomination(target=series)
    if nomination.canApprove():
        nomination.approve()

@add_help('Show latest source package information')
@add_arg('handle', help='Source package handle (series/source)')
@add_arg('-l', '--all', action='store_true', help='Query all pockets, ' +
         'including proposed')
@add_arg('-p', '--pocket', help='Query only the specified pocket')
def do_show_source(args):
    pockets = pocket_list(args.pocket, args.all)
    source = lp_get_source(args.lp, args.handle, pockets)
    if source:
        print('{} {} all {}'.format(source.source_package_name,
                                    source.source_package_version,
                                    source.pocket.lower()))

@add_help('Show latest binary packages information')
@add_arg('handle', help='Source package handle (series/source)')
@add_arg('-a', '--arch', nargs='*', help='Show binaries for the provided ' +
         'architecure. Can be specified multiple times.')
@add_arg('-l', '--all', action='store_true', help='Query all pockets, ' +
         'including proposed')
@add_arg('-p', '--pocket', help='Query only the specified pocket')
def do_show_binaries(args):
    pockets = pocket_list(args.pocket, args.all)
    binaries = lp_get_binaries(args.lp, args.handle, pockets)
    for binary in binaries:
        arch = binary.distro_arch_series_link.split('/')[-1]
        if args.arch and arch not in args.arch:
            continue
        print('{} {} {} {} {}'.format(binary.binary_package_name,
                                      binary.binary_package_version,
                                      arch,
                                      binary.pocket.lower(),
                                      binary.binaryFileUrls()[0]))

# -----------------------------------------------------------------------------
# Main entry point

if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    # Add subparsers for the subcommands and walk through the 'do_' functions
    subparsers = parser.add_subparsers(dest='subcommand', title='subcommands',
                                       required=True)
    module = sys.modules[__name__]
    for attr in (a for a in dir(module) if a.startswith('do_')):
        cmd_name = attr[3:].replace('_', '-')
        cmd_cb = getattr(module, attr)
        cmd_desc = cmd_cb.__doc__ or ''
        cmd_help = getattr(cmd_cb, 'help', [])
        cmd_args = getattr(cmd_cb, 'arg', [])

        sparser = subparsers.add_parser(cmd_name, help=cmd_help[0][0][0],
                                        description=cmd_desc, add_help=False)
        sparser.add_argument('-h', '--help', action='help')
        for (args, kwargs) in cmd_args:
            sparser.add_argument(*args, **kwargs)
        sparser.set_defaults(func=cmd_cb)

    # Parse the arguments
    args = parser.parse_args()

    # Log into launchpad and call the subcommand
    args.lp = Launchpad.login_with('tools', 'production', version='devel')
    args.func(args)
