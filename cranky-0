#!/bin/bash -eu

function run()
{
	local txt

	txt="  ${*}$(printf "%${COLS}s")"
	echo
	echo -e "\033[48;5;160m${txt::${COLS}}\033[0m"

	"${@}"
}

function is_clean()
{
	if [ -n "$(git status --porcelain)" ] ; then
		echo "Repo is not clean" >&2
		exit 1
	fi
}
function shift_ARGS()
{
	if [ ${#ARGS[@]} -eq 0 ] ; then
		usage
		exit 1
	fi

	ARG=${ARGS[0]}
	ARGS=("${ARGS[@]:1}")
}

function do_fix()
{
	run cranky fix
}

function do_rebase()
{
	run cranky rebase
}

function do_open()
{
	run cranky open
}

function do_configs()
{
	run cranky updateconfigs
}

function do_link()
{
	run cranky link-tb "${LINK_ARGS[@]}"
}

function do_close()
{
	./update-dkms-versions
	run cranky close
	run cranky tag
}

function do_dependents()
{
	run cranky-update-dependents
}

function do_verify()
{
	run cranky-verify-release-ready
}

function args_build()
{
	if [ -z "${POCKET}" ] ; then
		shift_ARGS
		POCKET=${ARG}
	fi
}

function do_build()
{
	run cranky-build-sources -f "${POCKET}"
}

function args_review()
{
	if [ -z "${POCKET}" ] ; then
		shift_ARGS
		POCKET=${ARG}
	fi
}

function do_review()
{
	run cranky-review-sources "${POCKET}"
	run cranky-reduce-debdiff

	run cranky-review-sources | less
	run review-debdiff | less
}

function args_cbd()
{
	# CBD consumes all remaining arguments
	CBD_ARGS=("${ARGS[@]}")
	ARGS=()
}

function do_cbd()
{
	run cbd-cli build "${CBD_ARGS[@]}"
}

function do_push()
{
	local tmp

	run cranky-push-all --dry-run
	echo -n "Push (y|n)? "
	read -r tmp
	if [ "${tmp}" != "y" ] ; then
        exit
	fi

	run cranky-push-all
}

function args_dput()
{
	if [ -z "${PPA}" ] ; then
		shift_ARGS
		PPA=${ARG}
	fi
}

function do_dput()
{
	run cranky dput-sources "${PPA}"
}

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-h] [-s SRU_CYCLE] [CBD_ARGS|POCKET|PPA]

Ubuntu kernel source package preparation, build, review and upload helper.

Positional arguments:
  CBD_ARGS                  CBD arguments, e.g., -o amd64 -o generic.
  POCKET                    Pocket containing the previous source package.
  PPA                       Build PPA.

Optional arguments:
  -h, --help                Show this help text and exit.
  -s, --sru-cycle SR_CYCLE  SRU cycle name, e.g., 2022.05.30-1.
EOF
}

# ----------------------------------------------------------------------------
# Main entry point

# Positional subcommand arguments
CBD_ARGS=()
POCKET=
PPA=

# Optional subcommand arguments
LINK_ARGS=()

ARGS=()
while [ ${#} -gt 0 ] ; do
    case "${1}" in
        -h|--help)
            usage
            exit
            ;;
		-s|--sru-cycle)
            shift
            LINK_ARGS=("-s" "${1}")
            ;;
		*)
			ARGS=("${@}")
			break
            ;;
	esac
	shift
done

readarray -t CMDS < <(echo "${0##*--}" | tr "-" "\n")

# Parse the provided commandline arguments
for cmd in "${CMDS[@]}" ; do
	if [ "$(type -t args_"${cmd}")" = "function" ]; then
		args_"${cmd}"
	fi
done
if [ ${#ARGS[@]} -ne 0 ] ; then
	usage
	exit 2
fi

# Check the current branch
branch=$(git rev-parse --abbrev-ref HEAD)
case "${branch}" in
	master-next|cranky/master-next) ;;
	*)
		echo "Invalid branch: ${branch}" >&2
		exit 1
		;;
esac

# Run the command(s)
COLS=$(tput cols)
for cmd in "${CMDS[@]}" ; do
	do_"${cmd}"
done
