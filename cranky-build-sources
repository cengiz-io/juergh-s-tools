#!/bin/bash -eu

function out()
{
	local rc=${?}

	trap - EXIT

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function usage()
{
	cat <<EOF
Usage: cranky-build-sources [-f] [-h] [-o] POCKET

Build a set of kernel packages.

Positional arguments:
  POCKET       The pocket to get the versions of the previous kernel packages
               from. If set to 'none', uses the version from the previous
               changelog entries.

Optional arguments:
  -f, --force  Force the build even if the repos are unclean.
  -h, --help   Show this help text and exit.
  -o, --orig   Include the orig source tarball in the upload.
EOF
}

force=0
pocket=
build_opts=()

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-f|--force)
			force=1
			;;
		-h|--help)
			usage
			exit
			;;
		-o|--orig)
			build_opts+=("--build-opts" "main:-sa")
			;;
		updates|release|security|proposed|none)
			if [ -z "${pocket}" ] ; then
				pocket=${1}
			else
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if [ -z "${pocket}" ] ; then
	usage
	exit 2
fi

if [ "${force}" -eq 0 ] && [ -n "$(git status --porcelain)" ] ; then
	echo "Repo is unclean" >&2
	echo "Use -f, --force to auto-clean before the build" >&2
	exit 1
fi

trap out EXIT

if [ "${pocket}" != "none" ] ; then
	# Get the previous versions from the provided pocket
	while IFS=' ' read -r package version rest ; do
		case "${package}" in
			linux-meta*)
				build_opts+=("--build-opts" "meta:-v${version}")
				;;
			linux-signed*)
				build_opts+=("--build-opts" "signed:-v${version}")
				;;
			linux-restricted-modules*)
				build_opts+=("--build-opts" "restricted-modules:-v${version}")
				;;
			linux*)
				build_opts+=("--build-opts" "main:-v${version}")
				;;
			*)
				echo "Unsupported package: ${package}" >&2
				exit 1
		esac
	done < <(cranky rmadison -s -p "${pocket}")
fi

echo "cranky build-sources ${build_opts[*]}"
cranky build-sources "${build_opts[@]}"
