#!/bin/bash -eu
#
# Build Raspberry Pi kernel packages
#

# List of 'minimal' module config options
modules=(
	# List of modules loaded on a Pi 4B with vc4-kms-v3d enabled
	AC97_BUS
	ASYNC_CORE
	ASYNC_FS
	ASYNC_MEMCPY
	ASYNC_PQ
	ASYNC_RAID6_RECOV
	ASYNC_XOR
	AUTOFS_FS
	BCM2835_DEVGPIOMEM
	BCM2835_VCHIQ_MMAL
	BCM_VC_SM_CMA
	BLK_DEV_DM
	BLK_DEV_MD
	BRCMFMAC
	BRCMUTIL
	BT
	BTRFS_FS
	BT_BCM
	BT_BNEP
	BT_HCIBTSDIO
	BT_HCIUART
	BT_INTEL
	BT_QCA
	BT_RFCOMM
	BT_RTL
	CFG80211
	CRYPTO_AES_ARM64
	CRYPTO_BLAKE2B
	CRYPTO_CMAC
	CRYPTO_CRCT10DIF_ARM64_CE
	CRYPTO_ECC
	CRYPTO_ECDH
	CRYPTO_SHA256
	CRYPTO_USER_API
	CRYPTO_USER_API_HASH
	CRYPTO_USER_API_SKCIPHER
	DM_MULTIPATH
	DRM
	DRM_KMS_HELPER
	DRM_PANEL_ORIENTATION_QUIRKS
	DRM_SCHED
	DRM_V3D
	DRM_VC4
	FB_SYS_COPYAREA
	FB_SYS_FILLRECT
	FB_SYS_FOPS
	FB_SYS_IMAGEBLIT
	FUSE_FS
	I2C_BCM2835
	I2C_BRCMSTB
	IPV6
	IP_NF_IPTABLES
	LIBCRC32C
	MD_LINEAR
	MD_MULTIPATH
	MD_RAID0
	MD_RAID1
	MD_RAID10
	MD_RAID456
	MEDIA_SUPPORT
	NETFILTER_XTABLES
	NET_SCH_FQ_CODEL
	NOP_USB_XCEIV
	NVMEM_RMEM
	PMAC_BACKLIGHT
	RAID6_PQ
	RAS_CEC
	RFKILL
	RPIVID_MEM
	SENSORS_RASPBERRYPI_HWMON
	SND
	SND_BCM2835
	SND_COMPRESS_OFFLOAD
	SND_DMAENGINE_PCM
	SND_PCM
	SND_PCM_OSS
	SND_RAWMIDI
	SND_SEQUENCER
	SND_SEQ_DEVICE
	SND_SEQ_MIDI
	SND_SEQ_MIDI_EVENT
	SND_SOC
	SND_SOC_HDMI_CODEC
	SND_TIMER
	SPI_BCM2835
	SPI_SPIDEV
	SQUASHFS
	UIO
	UIO_PDRV_GENIRQ
	USB_DWC2
	USB_GADGET
	USB_ROLE_SWITCH
	USB_XHCI_PCI
	USB_XHCI_PCI_RENESAS
	V4L2_MEM2MEM_DEV
	VIDEOBUF2_CORE
	VIDEOBUF2_DMA_CONTIG
	VIDEOBUF2_MEMOPS
	VIDEOBUF2_V4L2
	VIDEOBUF2_VMALLOC
	VIDEO_BCM2835
	VIDEO_CODEC_BCM2835
	VIDEO_ISP_BCM2835
	VIDEO_V4L2
	XOR_BLOCKS
	ZSTD_COMPRESS

	# Required for boot from USB
	USB_STORAGE
	USB_UAS
)

function usage()
{
	cat <<EOF
Usage: build-rpi-deb [-c CPUS] [-d] [-f] [-h] [-m] [-n CFG:VAL] [-o]
                     v6|v7|v7l|v8 [-- ARGS...]

Build Raspberry Pi kernel packages.

Positional arguments:
  v6                     Build an ARMv6 32-bit kernel.
  v7                     Build an ARMv7 32-bit kernel.
  v7l                    Build an ARMv7 32-bit LPAE kernel.
  v8                     Build an ARMv8 64-bit kernel.
  ARGS                   Additional argument(s) passed to kernel make. If not
                         provided, defaults to 'bindeb-pkg' (to build binary
                         Debian packages).

Optional arguments:
  -c, --cpus CPUS        Number of CPUs to use for compiling. If not specified,
                         defaults to the number of online CPUs.
  -d, --dbg-pkg          Also build the debug package.
  -f, --ubuntu-flavor    Use the Ubuntu kernel flavor name rather than the
                         raspberrypi flavor name.
  -h, --help             Show this help text and exit.
  -m, --minimal-modules  Build only a minimal set of modules.
  -n, --config CFG:VAL   Set kernel config option CFG to value VAL.
                         Possible values for VAL:
                           e:     Enable option
                           d:     Disable option
                           m:     Turn option into a module
                           u:     Undefine option
                           s=foo: Set option to string 'foo'
                           v=bar: Set option to value bar
  -o, --ubuntu-config    Use the Ubuntu kernel config rather than the
                         raspberrypi config.
EOF
}

cpus=$(getconf _NPROCESSORS_ONLN)
dbg_pkg=0
ubuntu_flavor=0
minimal_modules=0
configs=()
ubuntu_config=0
args=("bindeb-pkg")
version=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-c|--cpus)
			shift
			cpus=${1}
			;;
		-d|--dbg-pkg)
			dbg_pkg=1
			;;
		-f|--ubuntu-flavor)
			ubuntu_flavor=1
			;;
		-h|--help)
			usage
			exit
			;;
		-m|--minimal-modules)
			minimal_modules=1
			;;
		-n|--config)
			shift
			configs+=("${1}")
			;;
		-o|--ubuntu-config)
			ubuntu_config=1
			;;
		--)
			shift
			args=("${@}")
			break
			;;
		v6|v7|v7l|v8)
			version=${1}
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

case "${version}" in
	v6)
		if [ "${ubuntu_config}" -eq 1 ] ; then
			echo "Ubuntu does not support ARMv6" >&2
			exit 1
		fi
		export ARCH=arm
		export CROSS_COMPILE=arm-linux-gnueabihf-
		defconfig=bcmrpi_defconfig
		;;
	v7)
		export ARCH=arm
		export CROSS_COMPILE=arm-linux-gnueabihf-
		defconfig=bcm2709_defconfig
		ubuntu_flavorname=raspi-nolpae
		ubuntu_arch=armhf
		;;
	v7l)
		export ARCH=arm
		export CROSS_COMPILE=arm-linux-gnueabihf-
		defconfig=bcm2711_defconfig
		ubuntu_flavorname=raspi
		ubuntu_arch=armhf
		;;
	v8)
		export ARCH=arm64
		export CROSS_COMPILE=aarch64-linux-gnu-
		defconfig=bcm2711_defconfig
		ubuntu_flavorname=raspi
		ubuntu_arch=arm64
		;;
	*)
		usage
		exit 2
		;;
esac

# Initialize the build directory
buildd=$(pwd)/buildd/${version}
if ! [ -d "${buildd}" ] ; then
	mkdir -p "${buildd}"
fi

# Initialize the build version
if ! [ -e "${buildd}"/.version ] ; then
	echo 1 > "${buildd}"/.version
fi

# Generate the base config file
if [ ${ubuntu_config} -eq 1 ] ; then
	echo "-- Using Ubuntu config ${ubuntu_arch}/${ubuntu_flavorname}..."
	cat debian.raspi/config/config.common.ubuntu \
		debian.raspi/config/"${ubuntu_arch}"/config.common."${ubuntu_arch}" \
		debian.raspi/config/"${ubuntu_arch}"/config.flavour."${ubuntu_flavorname}" > \
		"${buildd}"/.config
else
	echo "-- Using raspberrypi config ${ARCH}/${defconfig}..."
	make O="${buildd}" "${defconfig}"
fi

# Only enable the minimal set of modules
if [ ${minimal_modules} -eq 1 ] ; then
	echo "-- Enabling minimal set of modules..."
	sed -i -e '/^.*=m$/d' "${buildd}"/.config
	printf "CONFIG_%s=m\n" "${modules[@]}" >> "${buildd}"/.config
fi

# Disable the build of the debug package
if [ ${dbg_pkg} -eq 0 ] ; then
	echo "-- Disabling the build of the debug package..."
	configs+=("DEBUG_INFO:u")
fi

# Purge the local version
configs+=("LOCALVERSION:s=")

# Set/modify additional options
config_cmds=()
for cfg_val in "${configs[@]}" ; do
	cfg=${cfg_val%%:*}
	val=${cfg_val#*:}
	case "${val}" in
		e)
			config_cmds+=("--enable" "${cfg}")  # Enable option
			;;
		d)
			config_cmds+=("--disable" "${cfg}")  # Disable option
			;;
		m)
			config_cmds+=("--module" "${cfg}")  # Turn option into a module
			;;
		u)
			config_cmds+=("--undefine" "${cfg}")  # Undefine option
			;;
		s=*)
			config_cmds+=("--set-str" "${cfg}" "${val#*=}")  # Set option to string
			;;
		v=*)
			config_cmds+=("--set-val" "${cfg}" "${val#*=}")  # Set option to value
			;;
		*)
			echo "-- Ignoring invalid config option: ${cfg_val}" >&2
			continue
			;;
	esac
done
if [ ${#config_cmds[@]} -gt 0 ] ; then
	./scripts/config --file "${buildd}"/.config "${config_cmds[@]}"
fi
make O="${buildd}" olddefconfig

kernel_version=$(make -k kernelversion)
build_version=$(cat "${buildd}"/.version)
abi_version=$((9000 + build_version))
curr_commit=$(git rev-parse HEAD)

if [ ${ubuntu_flavor} -eq 1 ] ; then
	local_version=-${abi_version}-${ubuntu_flavorname}
	pkg_version=${kernel_version}-${abi_version}-1+${version}+git${curr_commit::8}
else
	local_version=-${version}
	pkg_version=${kernel_version}-1+${version}+git${curr_commit::8}
fi

make_opts=(
	"O=${buildd}"
	"LOCALVERSION=${local_version}"
	"KDEB_PKGVERSION=${pkg_version}"
	"-j${cpus}"
	"${args[@]}"
)

echo "-- Running: make ${make_opts[*]} 2>&1 | tee build.log"
make "${make_opts[@]}" 2>&1 | tee build.log
