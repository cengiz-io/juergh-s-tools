#!/bin/bash -eu
#
# Run a chroot session. Create it first, if it doesn't exist
#

function pr_info()
{
	echo -e "\033[33m${*}\033[0m"
}

function pr_error()
{
	echo -e "\033[31m${*}\033[0m" 1>&2
}

function session_exists()
{
	schroot -l --all | grep -q "^session:${1}$"
}

function chroot_exists()
{
	schroot -l --all | grep -q "^chroot:${1}$"
}

function hostarch()
{
	case "${1#*-}" in
		fedora*|centos*)
			dpkg-architecture -q DEB_HOST_GNU_CPU
			;;
		*)
			dpkg-architecture -q DEB_HOST_ARCH
			;;
	esac
}

function usage()
{
	cat <<EOF
Usage: run-chroot [-c] [-d] [-h] [-p] [-r] [-s] [-u USER] [CHROOT[-ARCH]] [--]
       [COMMAND [ARGS]]

Run a chroot session. Create it first, if it doesn't exist.

Positional arguments:
  CHROOT                 Name of an existing session or chroot. If not
                         provided, defaults to the name of the running release
                         ($(lsb_release -c -s)).
  ARCH                   Chroot architecture. If not provided, defaults to the
                         running host architecture ($(dpkg-architecture -q DEB_HOST_ARCH)/$(dpkg-architecture -q DEB_HOST_GNU_CPU)).

Optional 
  -c, --list-chroots     List existing chroots.
  -d, --destroy          Destroy a session.
  -h, --help             Show this help text and exit.
  -p, --no-preserve-env  Don't preserve the user's environment inside the
                         chroot.
  -r, --recreate         Recreate an already existing session.
  -s, --list-sessions    List existing sessions.
  -u, --user USER        Run the session as the user USER.
EOF
}

destroy=0
preserve_env=1
recreate=0
user=${USER}
chroot=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-c|--list-chroots)
			schroot -l --all | grep "^source:" | sed 's/^source://' | sort
			exit
			;;
		-d|--destroy)
			destroy=1
			;;
		-h|--help)
			usage
			exit
			;;
		-p|--no-preserve-env)
			preserve_env=0
			;;
		-r|--recreate)
			recreate=1
			;;
		-s|--list-sessions)
			schroot -l --all | grep "^session:" | sed 's/^session://' | sort
			exit
			;;
		-u|--user)
			shift
			user=${1}
			;;
		--)
			shift
			break
			;;
		-*)
			pr_error "Invalid argument: ${1}"
			exit 2
			;;
		*)
			if [ -z "${chroot}" ] ; then
				chroot=${1}
			else
				break
			fi
			;;
	esac
	shift
done

if [ -z "${chroot}" ] ; then
	chroot=$(lsb_release -c -s)
fi

# Generate the session name from the provided chroot name. The naming
# convention is <user>-<name>-<arch>
dashes="${chroot//[^-]}"
case "${#dashes}" in
	0)
		# Chroot name contains no dashes
		session=${USER}-${chroot}-$(hostarch "${chroot}")
		;;
	1)
		# Chroot name contains a single dash
		case "${chroot}" in
			*-amd64|*-i386|*-powerpc|*-s390x|*-x86_64|*-armhf|*-arm64|*-ppc64el)
				session=${USER}-${chroot}
				;;
			*)
				session=${chroot}-$(hostarch "${chroot}")
				;;
		esac
		;;
	*)
		# Chroot name contains two or more dashes
		session=${chroot}
		;;
esac

# Generate the (base) chroot name from the session name
chroot=${session#*-}

# Destroy an existing session if -d, --destroy is provided
if [ "${destroy}" -eq 1 ] ; then
	if ! session_exists "${session}" ; then
		pr_error "No such session: ${session}"
		exit 1
	fi
	pr_info "Destroy existing session ${session}"
	schroot -e -c "${session}"
	exit
fi

# Destroy an existing session if -r, --recreate is provided
if [ "${recreate}" -eq 1 ] && session_exists "${session}" ; then
	pr_info "Destroy existing session ${session}"
	schroot -e -c "${session}"
fi

# Create the session if it doesn't exist
if ! session_exists "${session}" ; then
	if ! chroot_exists "${chroot}" ; then
		pr_info "Create new chroot ${chroot}"
		mk-sbuild --arch="${chroot#*-}" "${chroot%-*}"
		if ! grep -s '^/home' '/etc/schroot/sbuild/fstab' >/dev/null; then
			cat <<EOF | sudo tee --append '/etc/schroot/sbuild/fstab' >/dev/null
# Allow use of /home for run-chroot
/home           /home           none    rw,bind         0       0
EOF
		fi
	fi
	pr_info "Create new session ${session}"
	schroot -b -n "${session}" -c "${chroot}"

	# Upgrade packages
	cat << EOF | schroot -u root -r -c "${session}" -- bash -
if sh -c 'command -v apt-get' &> /dev/null ; then
    apt-get update
    apt-get -y dist-upgrade
    apt-get -y install sudo
fi
echo "${USER} ALL = NOPASSWD: ALL" > /etc/sudoers.d/"${USER}"
chmod 644 /etc/sudoers.d/"${USER}"
EOF
fi

# Assemble the PS1 prefix
debian_chroot=${chroot}
if [ "${user}" != "${USER}" ] ; then
	debian_chroot=${user}@${debian_chroot}
fi
export debian_chroot

# Assemble the optional schroot arguments
args=()
if [ "${preserve_env}" -eq 1 ] ; then
	args+=("-p")
fi

# Run the session
schroot -r -c "${session}" -u "${user}" "${args[@]}" -- "${@}"
