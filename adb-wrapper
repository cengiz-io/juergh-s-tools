#!/bin/bash -eu
#
# Wrapper around common adb operations
#

# -----------------------------------------------------------------------------
# Helper functions

function adb_send_keyevent()
{
	local key=${1}
	local event

	case "${key}" in
		power)  event=26 ;;
		enter)  event=66 ;;
		unlock) event=82 ;;
		*)
			echo "-- Invalid key name: ${key}" >&2
			return
			;;
	esac

	echo "-- Send keyevent ${event} (${key})"
	adb -s "${SERIAL}" shell input keyevent "${event}"
}

function adb_send_text()
{
	local text=${1}

	adb -s "${SERIAL}" shell input text "${text}"
}

# -----------------------------------------------------------------------------
# Plumbing commands

function do_display_off()
{
	if [ "$(do_display_state)" = "ON" ] ; then
		adb_send_keyevent power
	fi
}

function do_display_on()
{
	if [ "$(do_display_state)" = "OFF" ] ; then
		adb_send_keyevent power
	fi
}

function do_display_state()
{
	local state

	state=$(adb -s "${SERIAL}" shell dumpsys power | \
				grep -P '^Display Power: state=' | sed 's/.*=//')
	if [ -n "${state}" ] ; then
		echo "${state}"
		return
	fi

	# Old Android
	state=$(adb -s "${SERIAL}" shell dumpsys power | \
				grep -P '^\s+mPowerState=')
	if [ -n "${state}" ] ; then
		if [ "${state/SCREEN_ON_BIT/}" != "${state}" ] ; then
			echo "ON"
		else
			echo "OFF"
		fi
		return
	fi

	echo "UNKNOWN"
}

function do_serials()
{
	adb devices | awk '$2 == "device" { print $1 }'
}

# -----------------------------------------------------------------------------
# Porcelain Commands

function do_pull_download()
{
	local remotes dl_dir

	mkdir -p ~/Downloads/adb

	remotes=("/storage/self/primary/Download")
	while IFS= read -r dl_dir ; do
		if adb shell test -d "${dl_dir}"/Download ; then
			remotes+=("${dl_dir}"/Download)
		fi
	done < <(adb shell ls -d /storage/*)

	echo "-- Pull downloaded files from (${SERIAL}) to ~/Downloads/adb"
	adb -s "${SERIAL}" pull "${remotes[@]}" ~/Downloads/adb
}

function do_scrcpy()
{
	# Unlock the device
	do_unlock

	# Run scrcpy
	echo "-- Run scrcpy"
	scrcpy --serial "${SERIAL}" --turn-screen-off --stay-awake
}

function do_unlock()
{
	local pin

	# Get the pin from the password store
	echo "-- Get pin from password store"
	pin=$(pass show local/android/"${SERIAL}" | head -1)

	# Unlock the device
	echo "-- Unlock device (${SERIAL})"
	adb_send_keyevent unlock
	sleep 1
	adb_send_text "${pin}"
	adb_send_keyevent enter
}

# -----------------------------------------------------------------------------
# Usage and main entry point

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-h] [-s SERIAL] COMMAND [OPTS]

Wrapper around common adb operations.

Porcelain commands:
  pull-download        Pull all downloaded files.
  scrcpy               Run scrcpy.
  unlock               Unlock device.

Plumbing commands:
  display-off          Turn display off.
  display-on           Turn display on.
  display-state        Show display state (ON|OFF|UNKNOWN)
  serials              List serial numbers of connected devices.

Optional arguments:
  -h, --help           Show this help text and exit.
  -s, --serial SERIAL  Serial number of target device. If not provided, targets
                       the first device from the list of connected devices.
EOF
}

SERIAL=
command=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-s|--serial)
			SERIAL=${1}
			;;
		pull-download|scrcpy|unlock)
			command=${1}
			;;
		display-off|display-on|display-state|serials)
			command=${1}
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if [ -z "${command}" ] ; then
	usage
	exit 2
fi

if [ "${command}" != "serials" ] && [ -z "${SERIAL}" ] ; then
	# Get the serial number of the first device
	SERIAL=$(do_serials | head -1)
fi

do_"${command//-/_}"
