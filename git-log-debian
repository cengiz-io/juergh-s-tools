#!/bin/bash -eu
#
# Show Ubuntu kernel debian* commits and follow them across rebases
#

function out()
{
	local rc=${?}

	trap "" EXIT

	if [ "${rc}" -ne 0 ] ; then
		echo "-- Script failed" >&2
	fi

	exit "${rc}"
}

function pr_green()
{
	if [ "${QUIET}" -eq 0 ] ; then
		echo -e "\033[32m${*}\033[0m" >&2
	fi
}

function pr_orange()
{
	if [ "${QUIET}" -eq 0 ] ; then
		echo -e "\033[33m${*}\033[0m" >&2
	fi
}

function pr_red()
{
	if [ "${QUIET}" -eq 0 ] ; then
		echo -e "\033[31m${*}\033[0m" >&2
	fi
}

function pkg_name()
{
	local entry=${1}

	echo "${entry%% *}"
}

function pkg_version()
{
	local entry=${1}
	local version

	version=${entry#*\(}
	version=${version%\)*}

	echo "${version}"
}

declare -A TAGS

function verify_tag()
{
	local tag=${1} entry=${2:-}

	# Ignore already processed tags
	if [ -n "${TAGS[${tag}]:-}" ] ; then
		return 1
	fi

	# Verify that the tag exists
	if ! git rev-parse "${tag}" >/dev/null 2>&1 ; then
		pr_red "-- Tag not found: ${tag}"
		return 1
	fi

	# Verify that the tag entry matches the provided entry
	if [ -n "${entry}" ] ; then
		changelog=$(get_debian_dir "${tag}")/changelog
		tag_entry=$(git show "${tag}":"${changelog}" | head -1)
		if [ "${tag_entry}" != "${entry}" ] ; then
			pr_orange "-- Ignore invalid tag: ${tag}"
			return 1
		fi
	fi

	TAGS[${tag}]=1
}

function tag_name()
{
	local entry=${1}
	local name version tag

	name=$(pkg_name "${entry}")
	version=$(pkg_version "${entry}")

	if [ "${name#linux-source-}" != "${name}" ] ; then
		tag=
	else
		tag=${name#linux}
	fi
	tag=Ubuntu${tag}-${version}
	tag=${tag//~/_}

	echo "${tag}"
}

function get_debian_dir()
{
	local commit=${1}
	local debian

	debian=$(git show "${commit}":debian/debian.env 2>/dev/null |
	         sed -n 's/DEBIAN=//p')
	if [ -n "${debian}" ] ; then
		echo "${debian}"
	else
		echo debian
	fi
}

function get_subject()
{
	local commit=${1}

	git log --format=%B "${commit}" -1 | head -1
}

function log_debian()
{
	local start=${1}
	local first commit subject line tag changelog entries found entry \
	      tag_subject

	first=1
	while IFS= read -r commit ; do
		subject=$(get_subject "${commit}")
		line="${commit} ${subject}"

		if [ ${first} -eq 1 ] ; then
			first=0
			echo "${line}"
			continue
		fi

		# Check if this is a release commit based on the commit subject
		if [ "${subject#UBUNTU: Ubuntu-}" != "${subject}" ] ; then
			tag=${subject#UBUNTU: }
			tag=${tag//~/_}
			if verify_tag "${tag}" ; then
				pr_green "-- Follow release tag: ${tag}"
				log_debian "${tag}"
				return
			fi
		fi

		# Figure out if we need to follow a different commit based on
		# newly added debian<.foo>/changelog entries
		changelog=$(get_debian_dir "${commit}")/changelog
		readarray -t entries < <(git show --format= "${commit}" -- \
		                         "${changelog}" | sed -n 's/^+linux/linux/p')

		# No new entries, so continue
		if [ ${#entries[@]} -eq 0 ] ; then
			echo "${line}"
			continue
		fi

		# Walk the new entries and try to find a tagged one
		found=0
		for entry in "${entries[@]}" ; do
			tag=$(tag_name "${entry}")
			if verify_tag "${tag}" "${entry}" ; then
				found=1
				break
			fi
		done

		# None of the new entries is tagged, so continue
		if [ ${found} -eq 0 ] ; then
			echo "${line}"
			continue
		fi

		# Also process the current commit if its subject differs from the
		# subject of the tag that we're about to follow
		tag_subject=$(get_subject "${tag}")
		if [ "${tag_subject}" != "${subject}" ] ; then
			echo "${line}"
		fi

		# Finally follow the identified tag
		pr_green "-- Follow tag: ${tag}"
		log_debian "${tag}"
		return

	done < <(git log --format=%h --no-merges "${start}" -- debian debian.\*)
}

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-h] [-q] [COMMIT]

Show commits that modify debian and debian.* files starting from COMMIT or
HEAD if not provided. Follow commits across rebases.

Optional arguments:
  -h, --help   Show this help text and exit.
  -q, --quiet  Quiet mode.
EOF
}

QUIET=0
commit=

while [ ${#} -ne 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-q|--quiet)
			QUIET=1
			;;
		-*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
		*)
			if [ -n "${commit}" ] ; then
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			commit=${1}
			;;
	esac
	shift
done

if [ -z "${commit}" ] ; then
	commit=HEAD
fi

trap out EXIT

if ! git rev-parse --quiet --verify "${commit}" >/dev/null ; then
	echo "Commit does not exist: ${commit}" >&2
	exit 1
fi

ulimit -n $((16 * 1024))
log_debian "${commit}"
