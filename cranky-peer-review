#!/bin/bash -eu
#
# Fetch Ubuntu kernel repo for a peer review
#

function query_jira()
{
	local issue=${1}

	python3 -c "
import re
from jira import JIRA

jira = JIRA('https://warthogs.atlassian.net')
issue = jira.issue('${issue}', fields='summary,comment')

summary = issue.fields.summary
print('summary ' + summary)

found = False
for comment in reversed(issue.fields.comment.comments):
    for line in comment.body.split('\n'):
        m = re.search(r'(git\+ssh://[^ }]+).*(Ubuntu-[a-z0-9-._+]+)', line)
        if m:
            found = True
            print('fetch ' + m.group(1) + ' ' + m.group(2))
            continue
        m = re.search(r'\bpackages:\s*(.*)', line)
        if m:
            print('packages ' + m.group(1))
            continue
    if found:
        break
"
}

function do_checkout()
{
	echo
	echo "-- cranky-checkout -u ${HANDLE}"
	if [ "${DRY_RUN}" -eq 1 ] ; then
		return
	fi

	cranky-checkout -u "${HANDLE}"
}

function do_download()
{
	local abi path

	abi=$(echo "${FETCH[main]}" | grep -oP '\d+\.\d+\.\d+-\d+')
	path=${PATHS[0]}

	echo
	echo "-- scp ${REMOTE_DIR}/linux*_${abi//-/\[-.\]}.* ${path}/../"
	if [ "${DRY_RUN}" -eq 1 ] ; then
		return
	fi

	scp "${REMOTE_DIR}/linux*_${abi}.*" "${path}/../"
	scp "${REMOTE_DIR}/linux*_${abi//-/.}.*" "${path}/../"
}

function do_fetch()
{
	local fetch_opts path key val

	fetch_opts=("--no-tags")
	if [ "${FORCE}" -eq 1 ] ; then
		fetch_opts+=("--force")
	fi

	for path in "${PATHS[@]}" ; do
		echo
		echo "${path}"
		cd "${path}"
		key=$(cranky shell-helper tree-type)
		val=${FETCH["${key}"]}
		echo "-- git fetch ${fetch_opts[*]} ${val% *} tag ${val#* }"
		if [ "${DRY_RUN}" -eq 1 ] ; then
			continue
		fi

		git fetch "${fetch_opts[@]}" "${val% *}" tag "${val#* }"
	done
}

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-c] [-d] [-f] [-h] [-o] [-r] ISSUE

Parse the provided Jira <ISSUE> and fetch the referenced repos.

Optional arguments:
  -c, --checkout       Checkout the repos.
  -d, --dry-run        Don't fetch anything.
  -f, --fetch          Fetch repos.
  -h, --help           Show this help text and exit.
  -o, --download       Download the source packages.
  -r, --force          Overwrite existing tags.
EOF
}

checkout=1
DRY_RUN=0
fetch=1
download=1
FORCE=0
issue=

c=0
f=0
d=0

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-c|--checkout)
			c=1
			;;
		-d|--dry-run)
			DRY_RUN=1
			;;
		-f|--fetch)
			f=1
			;;
		-h|--help)
			usage
			exit
			;;
		-o|--download)
			d=1
			;;
		-r|--force)
			FORCE=1
			;;
		*)
			if [ -n "${issue}" ] ; then
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			issue=${1}
			;;
	esac
	shift
done

if [ -z "${issue}" ] ; then
	usage
	exit 2
fi

if [ "${c}${f}${d}" != "000" ] ; then
	checkout=${c}
	fetch=${f}
	download=${d}
fi

HANDLE=
REMOTE_DIR=
declare -A FETCH

while IFS= read -r line ; do
	key=${line%% *}
	val=${line#* }
	case "${key}" in
		summary)
			echo "summary:  ${val}"
			HANDLE=${val#* }
			HANDLE=${HANDLE%% *}
			echo "handle:   ${HANDLE}"
			;;
		fetch)
			case "${val% *}" in
				*-meta-*|*-meta)
					echo "meta:     ${val}"
					FETCH[meta]="${val}"
					;;
				*-signed-*|*-signed)
					echo "signed:   ${val}"
					FETCH[signed]="${val}"
					;;
				*-lrm-*|*-lrm|*-restricted-modules-*|*-restricted-modules)
					echo "lrm:      ${val}"
					FETCH[lrm]="${val}"
					;;
				*)
					if [ -n "${FETCH[main]:-}" ] ; then
						echo "FETCH[main] already set: ${FETCH[main]}" >&2
						exit 1
					fi
					echo "main:     ${val}"
					FETCH[main]="${val}"
					;;
			esac
			;;
		packages)
			echo "packages: ${val}"
			REMOTE_DIR=${val/\~//home/}
			;;
	esac
done < <(query_jira "${issue}")

if [ -z "${HANDLE}" ] ; then
	echo "Failed to determine handle" >&2
	exit 1
fi

if [ ${checkout} -eq 1 ] ; then
	do_checkout
fi

if [ ${download} -eq 0 ] && [ ${fetch} -eq 0 ] ; then
	exit
fi

readarray -t PATHS < <(cranky shell-helper source-packages-path "${HANDLE}")

if [ ${download} -eq 1 ] ; then
	do_download
fi

if [ ${fetch} -eq 1 ] ; then
	do_fetch
fi
