#!/bin/bash -eu
#
# Download kernel source packages from a PPA
#

function out()
{
	local rc=$?

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi
}

function usage()
{
	cat <<EOF
Usage: cranky-pull-sources [-h] POCKET

Download the kernel source packages from the provided pocket.

Positional arguments:
  POCKET      The pocket to pull the source package from.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

pocket=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		updates|release|security|proposed)
			if [ -z "${pocket}" ] ; then
				pocket=${1}
			else
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if [ -z "${pocket}" ] ; then
	usage
	exit 2
fi

trap out EXIT INT TERM HUP

# Get the source package versions from the provided pocket
declare -A versions=()
while IFS=' ' read -r package version rest ; do
	versions[${package}]=${version}
done < <(cranky rmadison -s -p "${pocket}")

# Walk through the package set
use_series=0
while read -r path ; do
	(
		cd "${path}"

		# Get the series and the source package names
		if [ -e debian/debian.env ] ; then
			# shellcheck disable=SC1091
			. debian/debian.env
			changelog=${DEBIAN}/changelog
		else
			changelog=debian/changelog
		fi
		series=$(dpkg-parsechangelog -l "${changelog}" -S Distribution)
		package=$(dpkg-parsechangelog -l "${changelog}" -S Source)

		# Get the package version
		version=${versions[${package}]}

		if [ "${use_series}" -eq 0 ] ; then
			if ! cranky pull-source "${package}" "${version}" ; then
				use_series=1
			fi
		fi

		if [ "${use_series}" -eq 1 ] ; then
			cranky pull-source "${package}" "${version}" "${series}"
		fi
	)
done < <(cranky shell-helper source-packages-path)
