#!/bin/bash -eu
#
# Search the linux 'Fixes:' file for commits that fix the given commit(s).
#

LINUX_FIXES=/srv/git/linux.fixes
LINUX_REPO=/srv/git/linux.git

function find_fixes()
{
	local commit=${1} indent=${2}
	local fixes fix

	readarray -t fixes < <(grep -P "__FIXES__\s+${commit::12}" "${LINUX_FIXES}")

	for fix in "${fixes[@]}" ; do
		# We found a match so print the original commit
		if [ -n "${ONELINE}" ] ; then
			echo "${ONELINE}"
			ONELINE=
		fi

		printf "%0.s " $(seq "${indent}")
		echo "${fix%% __FIXES__*}"
		find_fixes "${fix%% *}" "$((indent + 2))"
	done
}

function find_upstream_ref()
{
	local commit=${1}
	local pattern_list pattern found

	pattern_list=(
		"commit [0-9a-f]* upstream"
		"upstream commit [0-9a-f]*"
		"cherry[ -]?picked from .*\b[0-9a-f]*"
		"back[ -]?ported from .*\b[0-9a-f]*"
	)
	pattern=$(printf "|%s" "${pattern_list[@]}")
	pattern=${pattern:1}

	found=$(git log --format="%b" "${commit}" -1 | \
				grep -m1 -iP "${pattern}" | \
				grep -oP '[0-9a-f]{12,}' | \
				cut -c 1-12)

	echo "${found}"
}

function usage()
{
	cat <<EOF
Usage: find-linux-fixes [-h] COMMIT [COMMIT ...]

Find 'Fixes:' commits in the main Linux repo (Linus' repo) for the provided
commit hash(es). The provided commits can either be upstream commits or
commits from the current repo.

Optional arguments:
  -h, --help   Show this help text and exit.
EOF
}

commits=()

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			commits=("${@}")
			break
			;;
    esac
    shift
done

if [ ${#commits[@]} -eq 0 ] ; then
	usage
	exit 2
fi

for commit in "${commits[@]}" ; do
	commit=${commit::12}
	ONELINE=$(git --git-dir="${LINUX_REPO}" log --format='%h %s' \
				  "${commit}" -1 2>/dev/null || true)

	if [ -z "${ONELINE}" ] ; then
		# Check if the commit exists in the current repo
		if ! git cat-file -e "${commit}^{commit}" 2>/dev/null ; then
			echo "Error: Commit ${commit} not found neither in Linus' nor in" \
				 "the current repo" >&2
			continue
		fi

		# Try to find an upstream commit reference in the commit message
		upstream=$(find_upstream_ref "${commit}")
		if [ -z "${upstream}" ] ; then
			echo "Error: Commit ${commit} found in the current repo but" \
				 "doesn't contain an upstream reference" >&2
			continue
		fi

		# Get the subject of the upstream commit from Linus' repo
		ONELINE=$(git --git-dir="${LINUX_REPO}" log --format='%h %s' \
					  "${upstream}" -1 2>/dev/null || true)
		if [ -z "${ONELINE}" ] ; then
			echo "Error: Commit ${commit} from the current repo contains an" \
				 "upstream reference (${upstream::12}) which is not found" \
				 "in Linus' repo" >&2
			continue
		fi

		# Make it clear that we're processing a different commit
		ONELINE="${commit} -> [upstream] ${ONELINE}"
		commit=${upstream}
	fi

	find_fixes "${commit}" 2
done
