#!/bin/bash -eu
#
# Search the linux 'Fixes:' file for commits that fix the given commit(s).
#

LINUX_FIXES=/srv/git/linux.fixes
LINUX_REPO=/srv/git/linux.git

function find_fixes()
{
	local commit=${1} indent=${2:-2}
	local fixes fix

	readarray -t fixes < <(grep -P "__FIXES__\s+${commit::12}" "${LINUX_FIXES}")

	for fix in "${fixes[@]}" ; do
		printf "%0.s " $(seq "${indent}")
		echo "${fix%% __FIXES__*}"
		find_fixes "${fix%% *}" "$((indent + 2))"
	done
}

function get_upstream_commit()
{
	local commit=${1}
	local pattern_list pattern upstream

	pattern_list=(
		"commit [0-9a-f]{12,} upstream"
		"upstream commit [0-9a-f]{12,}"
		"cherry[ -]?picked from .*\b[0-9a-f]{12,}"
		"back[ -]?ported from .*\b[0-9a-f]{12,}"
	)
	pattern=$(printf "|%s" "${pattern_list[@]}")
	pattern=${pattern:1}

	upstream=$(git log --format="%b" "${commit}" -1 | \
				   grep -m1 -iP "${pattern}" |\
				   grep -oP "[0-9a-f]{12,}" || true)
	echo "${upstream::12}"
}

function usage()
{
	cat <<EOF
Usage: find-linux-fixes [-h] COMMIT [COMMIT ...]

Find 'Fixes:' commits in the upstream linux repo for the provided commit
hash(es). The provided commits can either be upstream commits or commits from
the current repo.

Optional arguments:
  -h, --help   Show this help text and exit.
EOF
}

commits=()

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			commits=("${@}")
			break
			;;
    esac
    shift
done

if [ ${#commits[@]} -eq 0 ] ; then
	usage
	exit 2
fi

for commit in "${commits[@]}" ; do
	commit=${commit::12}
	subject=$(git --git-dir="${LINUX_REPO}" log --format="%s" \
				  "${commit}" -1 2>/dev/null || true)

	if [ -n "${subject}" ] ; then
		# Commit found in then upstream linux repo, so process it
		echo "${commit} ${subject}"
		find_fixes "${commit}"

	else
		# Check if the commit exists in the current repo
		if ! git cat-file -e "${commit}^{commit}" 2>/dev/null ; then
			echo "Error: Commit ${commit} not found" >&2
			continue
		fi

		# Try to find an upstream commit reference in the commit message
		upstream=$(get_upstream_commit "${commit}")
		if [ -z "${upstream}" ] ; then
			echo "Error: No upstream commit found for commit ${commit}" >&2
			continue
		fi

		# Get the subject of the upstream commit
		subject=$(git --git-dir="${LINUX_REPO}" log --format="%s" \
					  "${upstream}" -1 2>/dev/null || true)
		if [ -z "${subject}" ] ; then
			echo "Error: Upstream commit ${commit} not found" >&2
			continue
		fi

		# Finally process the upstream commit
		echo "${commit} -> ${upstream} ${subject}"
		find_fixes "${upstream}"
	fi
done
