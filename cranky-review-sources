#!/bin/bash -eu

function do_colordiff()
{
	local line color

	while IFS= read -r line ; do
		color="\e[0m"  # no color
		case "${line}" in
			"-"*)           color="\e[31m"      ;;  # red
			"+"*)           color="\e[32m"      ;;  # green
			"!"*)           color="\e[33m"      ;;  # brown
			"@@"*)          color="\e[36m"      ;;  # cyan
			"diff --git "*) color="\e[1m\e[36m" ;;  # bold cyan
		esac
		echo -ne "${color}"
		echo -n "${line}"
		echo -e "\e[0m"
	done
}

function out()
{
	local rc=${?}

	trap - EXIT

	if [ -d "${TMPD}" ] ; then
		rm -rf "${TMPD}"
	fi

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function review_src()
{
	local src_dir=$1
	local cwd DEBIAN src version debdiff changes dsc prev_version prev_dsc

	cwd=${PWD}

	cd "${src_dir}" || exit 1

	DEBIAN=debian
	# shellcheck disable=SC1091
	if [ -e debian/debian.env ] ; then
		. debian/debian.env
	fi

	src=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Source)
	version=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Version)
	debdiff=${src}_${version}.debdiff
	changes=${src}_${version}_source.changes
	dsc=${src}_${version}.dsc

	if ! [ -f ../"${changes}" ] ; then
		echo "No .changes file found: ${changes}" >&2
		return
	fi

	if [ -z "${POCKET}" ] && [ -z "${OFFSET}" ] ; then
		# Review an existing debdiff
		if ! [ -e ../"${debdiff}" ] ; then
			echo "No .debdiff file found: ${debdiff}" >&2
			return
		fi

		# Previous and current dsc
		echo
		echo -e "\e[96m*** SOURCE ${src} *** head -2 ${debdiff} ***\e[0m"
		echo
		head -2 ../"${debdiff}"

		# lsdiff .debdiff
		echo
		echo -e "\e[96m*** SOURCE ${src} *** lsdiff ${debdiff} ***\e[0m"
		echo
		lsdiff -s ../"${debdiff}" | do_colordiff

		# filterdiff .debdiff
		echo
		echo -e "\e[96m*** SOURCE ${src} *** filterdiff ${debdiff} ***\e[0m"
		echo
		filterdiff -x '*/abi/*' "../${debdiff}" | do_colordiff

		# Content of .changes
		echo
		echo -e "\e[96m*** SOURCE ${src} *** cat ${changes} ***\e[0m"
		echo
		cat ../"${changes}"

	else
		# Create the debdiff
		if [ -z "${TMPD}" ] ; then
			TMPD=$(mktemp -d)
		fi

		# Figure out the previous package version
		if [ -n "${OFFSET}" ] ; then
			prev_version=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog \
											   -o "${OFFSET}" -c 1 -S Version)
		else
			prev_version=${PREV_VERSION[${src}]}
		fi

		prev_dsc="${src}"_"${prev_version}".dsc
		if ! [ -e ../"${prev_dsc}" ] ; then
			echo "No previous .dsc found: ${prev_dsc}" >&2
			return
		fi

		echo "Diffing against ${prev_dsc}"

		# Populate TMPD with symlinks to the previous package files
		( cd "${TMPD}" && dcmd "${cwd}"/../"${prev_dsc}" | \
			while read -r f ; do ln -sf "${f}" . ; done )

		# Finally call cranky review against TMPD
		( cd ../ && cranky review -p "${TMPD}" "${changes}" )

		# Add a 'header' that identifies the previous and current dsc
		{
			echo "# HEADER Current:  ${dsc}"
			echo "# HEADER Previous: ${prev_dsc}"
			cat ../"${debdiff}"
		} > ../"${debdiff}".tmp
		mv  ../"${debdiff}".tmp ../"${debdiff}"
	fi

	cd "${cwd}"
}

function usage()
{
	cat <<EOF
Usage: cranky review-sources [-c] [-h] [POCKET|OFFSET]

Review the differences between the current kernel source packages and
previous source packages.

Positional arguments:
  POCKET         Get the previous package versions from pocket POCKET.
  OFFSET         Get the previous package versions from the changelogs using
                 changelog entry offset OFFSET (1 == previous changelog entry).

  If neither POCKET nor OFFSET is provided, process the existing debdiff.

Optional arguments:
  -c, --current  Only review the source package built from the current
                 directory.
  -h, --help     Show this help message and exit.
EOF
}

current=0
POCKET=
OFFSET=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-c|--current)
			current=1
			;;
		-h|--help)
			usage
			exit
			;;
		release|security|updates|proposed)
			if [ -n "${POCKET}" ] ; then
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			POCKET=${1}
			;;
		[1-9])
			if [ -n "${OFFSET}" ] ; then
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			OFFSET=${1}
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

TMPD=
trap out EXIT

readarray -t src_dirs < <(cranky shell-helper source-packages-path)
if [ "${#src_dirs[@]}" -eq 0 ] ; then
	exit 1
fi

declare -A PREV_VERSION=()
# Get the previous versions from the provided pocket
if [ -n "${POCKET}" ] ; then
	while read -r src version rest ; do
		PREV_VERSION[${src}]=${version}
	done < <(cranky rmadison -s -p "${POCKET}")
fi

for src_dir in "${src_dirs[@]}" ; do
	if [ ${current} -eq 0 ] || [ "${src_dir}" = "$(pwd)" ] ; then
		review_src "${src_dir}"
	fi
done
