#!/bin/bash -eu
#
# Import GPG keys listed in LP user accounts
#

LP_URL="https://api.launchpad.net/devel"

function lp_get_user()
{
	local text=${1}

	curl --silent --show-error --get \
		 --data-urlencode "ws.op=findPerson" \
		 --data-urlencode "text=${text}" \
		 "${LP_URL}/people" | \
		python3 -c '
import json,sys
try:
    obj = json.load(sys.stdin)
    print(obj["entries"][0]["name"])
except:
    pass
'
}

function lp_get_gpg_fingerprints()
{
	local user=${1}

	curl --silent --show-error --get "${LP_URL}/~${user}/gpg_keys" | \
		python3 -c '
import json,sys
try:
    obj = json.load(sys.stdin)
    print("\n".join([o["fingerprint"] for o in obj["entries"]]))
except:
    pass
'
}

function usage()
{
	cat <<EOF
Usage: lp-import-gpg-key [-d] [-h] USER...

Import GPG keys listed in launchpad user accounts.

USER             An LP user identification like email or LP user name.

Optional arguments:
  -d, --dry-run  List key IDs but don't import the keys.
  -h, --help     Show this help text.
EOF
}

dry_run=0

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-d|--dry-run)
			dry_run=1
			;;
		-h|--help)
			usage
			exit
			;;
		-*)
			echo "Unexpected argument: ${1}" >&2
			exit 2
			;;
		*)
			break
			;;
	esac
	shift
done

if [ ${#} -eq 0 ] ; then
	usage
	exit 2
fi

for user in "${@}" ; do
	if [ "${user//@/}" != "${user}" ] ; then
		# Assume it's an email, so lookup the LP username
		user=$(lp_get_user "${user}")
	fi
	for fp in $(lp_get_gpg_fingerprints "${user}") ; do
		echo "-- ${user}: ${fp}"
		if [ ${dry_run} -eq 1 ] ; then
			gpg --no-tty --search-keys "${fp}" 2>/dev/null || true
		else
			gpg --keyserver keyserver.ubuntu.com --recv-keys "${fp}" || true
		fi
	done
done
			   
