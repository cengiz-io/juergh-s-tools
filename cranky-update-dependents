#!/bin/bash -eu

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP

	if [ ${rc} -ne 0 ] ; then
		echo "Error: Script failed" >&2
	fi

	exit "${rc}"
}

function usage()
{
	cat <<EOF
Usage: cranky-update-dependents [-f] [-h]

Update all dependent kernel packages.

Optional arguments:
  -f, --force  Update existing tags.
  -h, --help   Show this help text and exit.
EOF
}

CRANKY=${CRANKY:-cranky}

tag_opts=()

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-f|--force)
			tag_opts=("-f")
			;;
		-h|--help)
			usage
			exit
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

readarray -t paths < <("${CRANKY}" shell-helper source-packages-path)

main_branch=
for path in "${paths[@]}" ; do
	cd "${path}"
	if [ "$("${CRANKY}" shell-helper tree-type)" = "main" ] ; then
		main_branch=$(git rev-parse --abbrev-ref HEAD)
		break
	fi
done

if [ -z "${main_branch}" ] ; then
	echo "Failed to determine main branch" >&2
	exit 1
fi

for path in "${paths[@]}" ; do
	cd "${path}"

	if [ "$("${CRANKY}" shell-helper tree-type)" = "main" ] ; then
		continue
	fi

	echo "${path}"

	branch=${main_branch/-next/}
	git checkout "${branch}"

	tag=$(git describe --exact-match HEAD 2>/dev/null || echo)
	if [ -z "${tag}" ] ; then
		tag=$(git cat-file -p HEAD | grep -m1 '^ tag Ubuntu-' | cut -c 6-)
		if [ -z "${tag}" ] ; then
			echo "Current HEAD is untagged and not a merged tag" >&2
			exit 1
		fi
	fi

	head=$(git rev-parse HEAD)

	git clean -dxf
	"${CRANKY}" update-dependent
	"${CRANKY}" tag "${tag_opts[@]}"

	echo
	git --no-pager log "${head}"~1..
	echo
done

echo "Success: Updated all dependents"
