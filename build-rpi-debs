#!/bin/bash -eu
#
# Build a Raspberry Pi kernel package that is installable on Ubuntu
#

# List of 'minimal' module config options
MINIMAL_MODULES=(
	# List of modules loaded on a Pi 4B with vc4-kms-v3d enabled
	AC97_BUS
	ASYNC_CORE
	ASYNC_FS
	ASYNC_MEMCPY
	ASYNC_PQ
	ASYNC_RAID6_RECOV
	ASYNC_XOR
	AUTOFS_FS
	BCM2835_DEVGPIOMEM
	BCM2835_VCHIQ_MMAL
	BCM_VC_SM_CMA
	BLK_DEV_DM
	BLK_DEV_MD
	BRCMFMAC
	BRCMUTIL
	BT
	BTRFS_FS
	BT_BCM
	BT_BNEP
	BT_HCIBTSDIO
	BT_HCIUART
	BT_INTEL
	BT_QCA
	BT_RFCOMM
	BT_RTL
	CFG80211
	CRYPTO_AES_ARM64
	CRYPTO_BLAKE2B
	CRYPTO_CMAC
	CRYPTO_CRCT10DIF_ARM64_CE
	CRYPTO_ECC
	CRYPTO_ECDH
	CRYPTO_SHA256
	CRYPTO_USER_API
	CRYPTO_USER_API_HASH
	CRYPTO_USER_API_SKCIPHER
	DM_MULTIPATH
	DRM
	DRM_KMS_HELPER
	DRM_PANEL_ORIENTATION_QUIRKS
	DRM_SCHED
	DRM_V3D
	DRM_VC4
	FB_SYS_COPYAREA
	FB_SYS_FILLRECT
	FB_SYS_FOPS
	FB_SYS_IMAGEBLIT
	FUSE_FS
	I2C_BCM2835
	I2C_BRCMSTB
	IPV6
	IP_NF_IPTABLES
	LIBCRC32C
	MD_LINEAR
	MD_MULTIPATH
	MD_RAID0
	MD_RAID1
	MD_RAID10
	MD_RAID456
	MEDIA_SUPPORT
	NETFILTER_XTABLES
	NET_SCH_FQ_CODEL
	NOP_USB_XCEIV
	NVMEM_RMEM
	PMAC_BACKLIGHT
	RAID6_PQ
	RAS_CEC
	RFKILL
	RPIVID_MEM
	SENSORS_RASPBERRYPI_HWMON
	SND
	SND_BCM2835
	SND_COMPRESS_OFFLOAD
	SND_DMAENGINE_PCM
	SND_PCM
	SND_PCM_OSS
	SND_RAWMIDI
	SND_SEQUENCER
	SND_SEQ_DEVICE
	SND_SEQ_MIDI
	SND_SEQ_MIDI_EVENT
	SND_SOC
	SND_SOC_HDMI_CODEC
	SND_TIMER
	SPI_BCM2835
	SPI_SPIDEV
	SQUASHFS
	UIO
	UIO_PDRV_GENIRQ
	USB_DWC2
	USB_GADGET
	USB_ROLE_SWITCH
	USB_XHCI_PCI
	USB_XHCI_PCI_RENESAS
	V4L2_MEM2MEM_DEV
	VIDEOBUF2_CORE
	VIDEOBUF2_DMA_CONTIG
	VIDEOBUF2_MEMOPS
	VIDEOBUF2_V4L2
	VIDEOBUF2_VMALLOC
	VIDEO_BCM2835
	VIDEO_CODEC_BCM2835
	VIDEO_ISP_BCM2835
	VIDEO_V4L2
	XOR_BLOCKS
	ZSTD_COMPRESS

	# Required for boot from USB
	USB_STORAGE
	USB_UAS
)

function usage()
{
	cat <<EOF
Usage: build-rpi-deb [-c CPUS] [-h] [-m] [-u] v7|v7l|v8 [[--] [ARGS...]]

Build Raspberry Pi kernel packages that are installable on Ubuntu.

Positional arguments:
  v7               Build a 32-bit kernel.
  v7l              Build a 32-bit LPAE kernel.
  v8               Build a 64-bit kernel.
  ARGS             Additional arguments passed to kernel make. If not provided,
                   defaults to 'bindeb-pkg' (to build binary Debian packages).

Optional arguments:
  -c, --cpus CPUS  Number of CPUs to use for compiling. If not specified,
                   defaults to the number of online CPUs.
  -d, --dbg-pkg    Also build the debug package.
  -h, --help       Show this help text and exit.
  -m, --minimal    Build only a minimal set of modules.
  -u, --ubuntu     Use the Ubuntu kernel config rather than the raspberrypi
                   config.
EOF
}

cpus=$(getconf _NPROCESSORS_ONLN)
debug=0
minimal=0
ubuntu=0
args=("bindeb-pkg")
version=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-c|--cpus)
			shift
			cpus=${1}
			;;
		-d|--debug)
			debug=1
			;;
		-h|--help)
			usage
			exit
			;;
		-m|--minimal)
			minimal=1
			;;
		-u|--ubuntu)
			ubuntu=1
			;;
		--)
			shift
			args=("${@}")
			break
			;;
		v7|v7l|v8)
			if [ -z "${version}" ] ; then
				version=${1}
			else
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

case "${version}" in
	v7)
		export ARCH=arm
		export CROSS_COMPILE=arm-linux-gnueabihf-
		defconfig=bcm2709_defconfig  # v7
		ubuntu_config=config.flavour.raspi-nolpae
		ubuntu_arch=armhf
		;;
	v7l)
		export ARCH=arm
		export CROSS_COMPILE=arm-linux-gnueabihf-
		defconfig=bcm2711_defconfig  # v7l
		ubuntu_config=config.flavour.raspi
		ubuntu_arch=armhf
		;;
	v8)
		export ARCH=arm64
		export CROSS_COMPILE=aarch64-linux-gnu-
		defconfig=bcm2711_defconfig  # v8
		ubuntu_config=config.flavour.raspi
		ubuntu_arch=arm64
		;;
	*)
		usage
		exit 2
		;;
esac

mkdir -p buildd

# Generate the base config file
if [ "${ubuntu}" -eq 0 ] ; then
	echo "-- Using config ${defconfig}..."
	make O=buildd "${defconfig}"
else
	echo "-- Using config ${ubuntu_config}..."
	cat debian.raspi/config/config.common.ubuntu \
		debian.raspi/config/"${ubuntu_arch}"/config.common."${ubuntu_arch}" \
		debian.raspi/config/"${ubuntu_arch}"/"${ubuntu_config}" > \
		buildd/.config
fi

# Only enable the minimal set of modules
if [ ${minimal} -eq 1 ] ; then
	echo "-- Enabling minimal set of moudles..."
	sed -i -e '/^.*=m$/d' buildd/.config
	printf "CONFIG_%s=m\n" "${MINIMAL_MODULES[@]}" >> buildd/.config
fi

# Disable the build of the debug package
if [ ${debug} -eq 0 ] ; then
	echo "-- Disabling the build of the debug package..."
	sed -i -e 's/^CONFIG_DEBUG_INFO=y$/# CONFIG_DEBUG_INFO is not set/' \
		buildd/.config
fi

# Purge the local version
sed -i 's/CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION=""/' buildd/.config

make O=buildd olddefconfig

version=$((9000 + $(cat buildd/.version || echo 1)))

echo "-- Running: make O=buildd LOCALVERSION=-${version}-raspi -j${cpus} ${args[*]}"
make O=buildd LOCALVERSION="-${version}-raspi" -j"${cpus}" "${args[@]}"
