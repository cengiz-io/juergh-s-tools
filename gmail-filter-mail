#!/bin/bash -eu

function out()
{
	local rc=$?

	trap - EXIT INT TERM HUP

	if [ -n "${CONFIG}" ] ; then
		rm -f "${CONFIG}"
	fi

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function canonical_filter_mail()
{
	cat <<__EOF__
print('-- Move \'[ACTIVITY]\' mails')
messages = account['Mailing List/Canonical/canonical-kernel-team']:contain_subject('[ACTIVITY]') +
           account['Mailing List/Canonical/core-canonical-kernel-team']:contain_subject('[ACTIVITY]')
move_messages(messages, account['Canonical/Activity'])

print('-- Move \'The Daily Bug Report for ...\' mails')
messages = account['Mailing List/Ubuntu/kernel-team']:contain_subject('The Daily Bug Report for')
move_messages(messages, account['Canonical/Bugs'])

print('-- Move Salesforce mails')
messages = account['Mailing List/Canonical/canonical-kernel-team']:contain_subject('SFDC')
move_messages(messages, account['Canonical/SalesForce'])

-- Move noise mails (filter by subject)
noise = {
   ['Mailing List/Ubuntu/kernel-team'] = ' uploaded (ABI bump)',
   ['Launchpad-Message-For/canonical-kernel-team'] = ' -proposed tracker',
}
for folder, subject in pairs(noise) do
   print('-- Move \'' .. subject .. '\' mails')
   messages = account[folder]:contain_subject(subject)
   move_messages(messages, account[folder .. '/noise'])
end

-- Move noise mails (filter by sender)
noise = {
   ['Launchpad-Message-For/canonical-kernel-team'] = 'Ubuntu Kernel Bot',
   ['Launchpad-Message-For/canonical-kernel-team'] = 'Launchpad Buildd System',
}
for folder, sender in pairs(noise) do
   print('-- Move mails from \'' .. sender .. '\'')
   messages = account[folder]:contain_from(sender)
   move_messages(messages, account[folder .. '/noise'])
end

-- Mark APPLIED threads as read
-- mail_dirs = {
--    'Mailing List/Canonical/canonical-kernel-team',
--    'Mailing List/Ubuntu/kernel-team',
-- }
-- for _, mail_dir in ipairs(mail_dirs) do
--    results = account[mail_dir]:is_unseen():contain_subject('APPLIED')
--    results = find_related(results)
--    results:mark_seen()
-- end
__EOF__
}

function usage()
{
	cat <<EOF
Usage: gmail-filter-mail [-a] [-d] [-h] [-q] USERNAME

Filter gmail mails using imapfilter.

Positional arguments:
  USERNAME       The gmail username

Optional arguments:
  -a, --archive  Archive mails.
  -d, --dry-run  Dump the imapfilter config file but do not run it.
  -h, --help     Show this help text and exit.
  -q, --quiet    Run imapfilter in non-verbose mode.
EOF
}

username=
archive=0
dry_run=0
quiet=0

while [ $# -gt 0 ] ; do
	case "${1}" in
		-a|--archive)
			archive=1
			;;
		-d|--dry-run)
			dry_run=1
			;;
		-h|--help)
			usage
			exit
			;;
		-q|--quiet)
			quiet=1
			;;
		-*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
		*)
			if [ -n "${username}" ] ; then
				usage
				exit 2
			fi
			username=${1}
			;;
	esac
	shift
done

if [ -z "${username}" ] ; then
	usage
	exit 2
fi

case "${username}" in
	*@canonical.com)
		filter=canonical_filter_mail
		;;
	*)
		echo "Invalid username: ${username}" >&2
		exit 1
		;;
esac

CONFIG=
trap out EXIT INT TERM HUP

cwd=$(dirname "$(readlink -e "${0}")")
CONFIG=$(mktemp)

# Pull in the library
cat "${cwd}/config/imapfilter/lib.lua" > "${CONFIG}"

# Common/global options
cat <<EOF >>"${CONFIG}"

options.timeout = 120
options.subscribe = true
options.create = true
-- options.namespace = false
options.info = false

account = IMAP {
   server = 'imap.gmail.com',
   username = '${username}',
   password = show_pass('google.com/${username}'),
   ssl = 'tls1.2',
}
EOF

# Per-account config options
"${filter}" >> "${CONFIG}"

# Archive emails?
if [ "${archive}" -eq 1 ] ; then
	cat <<__EOF__

print('-- Archive mails')
archive_messages(account, 60)
__EOF__
fi

# Is this a dry-run?
if [ "${dry_run}" -eq 1 ] ; then
	cat "${CONFIG}"
	exit
fi

opts=()
if [ "${quiet}" -eq 0 ] ; then
	opts+=("-v")
fi

imapfilter "${opts[@]}" -c "${CONFIG}"
