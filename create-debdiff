#!/bin/bash -eu
#
# Create a debdiff file
#

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-h] [PREVIOUS_VERSION|OFFSET]

Create a debdiff file.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

prev_version_offset=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			if [ -n "${prev_version_offset}" ] ; then
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			prev_version_offset=${1}
			;;
	esac
	shift
done

curr_name=$(dpkg-parsechangelog -S Source)
curr_version=$(dpkg-parsechangelog -S Version)
curr_base=../${curr_name}_${curr_version}

case "${prev_version_offset}" in
	"")
		prev_name=$(dpkg-parsechangelog -S Source -o 1 -c 1)
		prev_version=$(dpkg-parsechangelog -S Version -o 1 -c 1)
		;;
	-*)
		offset=${prev_version_offset#-}
		prev_name=$(dpkg-parsechangelog -S Source -o "${offset}" -c 1)
		prev_version=$(dpkg-parsechangelog -S Version -o "${offset}" -c 1)
		;;
	*)
		prev_name=${curr_name}
		prev_version=${prev_version_offset}
		;;
esac
prev_base=../${prev_name}_${prev_version}


echo "Current base:  ${curr_base}"
echo "Previous base: ${prev_base}"

if [ -e "${prev_base}".dsc ] && [ -e "${curr_base}".dsc ] ; then
	prev=${prev_base}.dsc
	curr=${curr_base}.dsc
elif [ -e "${prev_base}"_source.changes ] && [ -e "${curr_base}"_source.changes ] ; then
	prev=${prev_base}_source.changes
	curr=${curr_base}_source.changes
else
	echo "Current and/or previous .dsc or .changes files not found" >&2
	exit 1
fi

{
	# Add a 'header' that identifies the previous and current dsc
	echo "# HEADER Current:  ${curr##*/}"
	echo "# HEADER Previous: ${prev##*/}"

	# Generate the debdiff
	debdiff "${prev}" "${curr}"
} > "${curr_base}".debdiff || true

echo "Created ${curr_base}".debdiff
