#!/bin/bash -eu
#
# Fetch Ubuntu kernel repo for a peer review
#

function query_jira()
{
	local issue=${1}

	python3 -c "
import re
from jira import JIRA

jira = JIRA('https://warthogs.atlassian.net')
issue = jira.issue('${issue}', fields='summary,comment')

summary = issue.fields.summary
print('summary ' + summary)

found = False
for comment in reversed(issue.fields.comment.comments):
    for line in comment.body.split('\n'):
        m = re.search(r'(git\+ssh://[^ }]+).*(Ubuntu-[a-z0-9-._+]+)', line)
        if m:
            found = True
            print('fetch ' + m.group(1) + ' ' + m.group(2))
            continue
        m = re.search(r'\bpackages:\s*(.*)', line)
        if m:
            print('packages ' + m.group(1))
            continue
    if found:
        break
"
}

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-d] [-h] ISSUE

Parse the provided Jira <ISSUE> and fetch the referenced repos.

Optional arguments:
  -d, --dry-run  Don't fetch anything.
  -h, --help     Show this help text and exit.
EOF
}

dry_run=0
issue=

while [ ${#} -gt 0 ] ; do
    case "${1}" in
        -d|--dry-run)
            dry_run=1
            ;;
        -h|--help)
            usage
            exit
            ;;
        *)
            if [ -n "${issue}" ] ; then
                echo "Invalid argument: ${1}" >&2
                exit 2
            fi
            issue=${1}
            ;;
    esac
    shift
done

if [ -z "${issue}" ] ; then
	usage
	exit 2
fi

declare -A FETCH

rdir=
while IFS= read -r line ; do
	key=${line%% *}
	val=${line#* }
	case "${key}" in
		summary)
			echo "summary:  ${val}"
			handle=${val#* }
			handle=${handle%% *}
			echo "handle:   ${handle}"
			;;
		fetch)
			case "${val% *}" in
				*-meta-*|*-meta)
					echo "meta:     ${val}"
					FETCH[meta]="${val}"
					;;
				*-signed-*|*-signed)
					echo "signed:   ${val}"
					FETCH[signed]="${val}"
					;;
				*-lrm-*|*-lrm|*-restricted-modules-*|*-restricted-modules)
					echo "lrm:      ${val}"
					FETCH[lrm]="${val}"
					;;
				*)
					if [ -n "${FETCH[main]:-}" ] ; then
						echo "FETCH[main] already set: ${FETCH[main]}" >&2
						exit 1
					fi
					echo "main:     ${val}"
					FETCH[main]="${val}"
					;;
			esac
			;;
		packages)
			echo "packages: ${val}"
			rdir=${val}
			;;
	esac
done < <(query_jira "${issue}")

echo
echo "-- cranky-checkout -u ${handle}"
if [ ${dry_run} -eq 0 ] ; then
	cranky-checkout -u "${handle}"
fi

first=1
while IFS= read -r path ; do
	if [ ${first} -eq 1 ] ; then
		first=0
		abi=$(echo "${FETCH[main]}" | grep -oP '\d+\.\d+\.\d+-\d+')

		echo
		echo "-- scp ${rdir}/linux*_${abi//-/\[-.\]}.* ${path}/../"
		if [ ${dry_run} -eq 0 ] ; then
			scp "${rdir}/linux*_${abi}.*" "${path}/../"
			scp "${rdir}/linux*_${abi//-/.}.*" "${path}/../"
		fi
	fi

	echo
	echo "${path}"
	cd "${path}"
	key=$(cranky shell-helper tree-type)
	val=${FETCH["${key}"]}
	echo "-- git fetch --no-tags ${val% *} tag ${val#* }"
	if [ ${dry_run} -eq 0 ] ; then
		git fetch --no-tags "${val% *}" tag "${val#* }"
	fi
done < <(cranky shell-helper source-packages-path "${handle}")
