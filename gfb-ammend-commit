#!/usr/bin/env python3
#
# git filter-branch helper: Ammend commit messages
#

import argparse
import os
import re
import sys
import json

from subprocess import run, PIPE

RED = ("\033[31m", "\033[0m")
GREEN = ("\033[32m", "\033[0m")
YELLOW = ("\033[33m", "\033[0m")
NONE = ("", "")

REPOS = (
    ('/data/git/linux.git', 'linux'),
    ('/data/git/linux-stable.git', 'linux-stable'),
    ('/data/git/linux-rpi.git', 'linux-rpi'),
)

def run_cmd(cmd, stderr=None):
    """
    Run a command and return the exit status and stdout
    """
    proc = run(cmd, stdout=PIPE, stderr=stderr, universal_newlines=True,
               check=False)
    stdout = proc.stdout.split("\n")[:-1]
    return proc.returncode, stdout


def find_provenance(commit):
    """
    Try to find the provenance of the provided commit hash
    """
    for repo in REPOS:
        rc, _stdout = run_cmd(['git', '--git-dir', repo[0], 'show', commit],
                              stderr=PIPE)
        if rc == 0:
            return repo[1]
    return 'not-found'


def modify_msg(msg, reqs, acks, sobs, provenance, bugs, cves, note, prefix,
               color=NONE):
    """
    Modify a commit message
    """
    subject = msg.pop(0)

    # -------------------------------------------------------------------------
    # Add a subject prefix
    if prefix and not subject.startswith(prefix):
        subject = color[0] + prefix + subject + color[1]

    # -------------------------------------------------------------------------
    # Remove leading and trailing newlines

    while len(msg) > 0 and msg[0] == "":
        msg = msg[1:]

    while len(msg) > 0 and msg[-1] == "":
        msg = msg[:-1]

    # -------------------------------------------------------------------------
    # Add Buglinks

    if bugs:
        # Extract existing BugLink lines into a tmp list
        tmp_bug = []
        tmp_msg = []
        for m in msg:
            if re.match(r"BugLink: http[s]://bugs.launchpad.net", m):
                tmp_bug.append(color[0] + m + color[1])
            else:
                tmp_msg.append(m)

        # Add new BugLink line(s)
        for bug in bugs:
            if bug.startswith('http'):
                tmp_bug.append(color[0] +
                               "BugLink: {}".format(bug) +
                               color[1])
            else:
                tmp_bug.append(color[0] + "BugLink: https://" +
                               "bugs.launchpad.net/bugs/{}".format(bug) +
                               color[1])

        # Prepend the sorted BugLinks to the message
        msg = sorted(set(tmp_bug)) + [""] + tmp_msg

    # -------------------------------------------------------------------------
    # Add CVE tags

    if cves:
        # Extract existing CVE lines into a tmp list
        tmp_cve = []
        tmp_msg = []
        for m in msg:
            if re.match(r"CVE-[0-9]{4}-[0-9]{1,}", m):
                tmp_cve.append(color[0] + m + color[1])
            else:
                tmp_msg.append(m)

        # Add new CVE tag(s)
        for cve in cves:
            cve = cve.upper()
            if cve.startswith("CVE-"):
                cve = cve[4:]
            tmp_cve.append(color[0] + "CVE-{}".format(cve) + color[1])

        # Prepend the sorted CVE tags to the message
        msg = sorted(set(tmp_cve)) + [""] + tmp_msg

    # -------------------------------------------------------------------------
    # Add provenance

    if provenance:
        # Get the index of the last 'cherry picked/backported from' line
        idx = 0
        for i, m in enumerate(msg):
            if (("(cherry picked from commit" in m or
                 "(forward ported from commit" in m or
                 "(backported from commit" in m)):
                idx = i

        # Add the provenance to the line
        m = re.match(r"(.*? from commit)\s+([0-9a-f]{40})\s*(.*)\)", msg[idx])
        if m:
            prefix, commit = m.group(1, 2)
            if provenance == 'auto':
                provenance = find_provenance(commit)
#            print('-->' + commit + '--' + provenance + '<--', file=sys.stderr)
            if provenance == "linux":
                msg[idx] = "{}{} {}){}".format(color[0], prefix, commit,
                                               color[1])
            else:
                msg[idx] = "{}{} {} {}){}".format(color[0], prefix, commit,
                                                  provenance, color[1])

    # -------------------------------------------------------------------------
    # Add <foo>-by tags

    # Add requested-by tags
    for req in reqs:
        msg.append(color[0] + "Requested-by: {}".format(req) + color[1])

    # Add acked-by tags
    for ack in acks:
        msg.append(color[0] + "Acked-by: {}".format(ack) + color[1])

    # Add signed-off-by tags
    for sob in sobs:
        msg.append(color[0] + "Signed-off-by: {}".format(sob) + color[1])

    # -------------------------------------------------------------------------
    # Add note

    if note:
        # Get the index of the last 'Signed-off-by' line
        idx = 0
        for i, m in enumerate(msg):
            if "Signed-off-by: " in m:
                idx = i

        # Insert the note
        msg.insert(idx, color[0] + note + color[1])

    # -------------------------------------------------------------------------
    # Insert an empty line before the last 'cherry picked/backported from' line

    # Get the index of the last 'cherry picked/backported from' line
    #idx = 0
    #for i, m in enumerate(msg):
    #    if (("(cherry picked from commit" in m or
    #         "(forward ported from commit" in m or
    #         "(backported from commit" in m)):
    #        idx = i

    #if msg[idx - 1] != "":
    #    msg.insert(idx, "")

    # -------------------------------------------------------------------------
    # Prepend the subject to the message

    msg = [subject, ""] + msg

    # -------------------------------------------------------------------------
    # Squeeze multiple empty lines

    tmp_msg = []
    p = ""
    for m in msg:
        if m == "" and p == "":
            continue
        p = m
        tmp_msg.append(m)
    msg = tmp_msg

    return msg


def resolve_nicks(kteam_rc, nicks):
    if not nicks:
        return []

    result = []
    for nick in nicks.split(","):
        try:
            result.append(kteam_rc["irc-aliases"][nick])
        except KeyError:
            print(RED[0] +
                  "Nick '{}' not found in ~/.kteam.rc".format(nick) +
                  RED[1])
            sys.exit(1)
    return result


def main():
    """
    Main entry point
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--ack", metavar="nick[,nick,...]",
                        help="IRC nickname of the person who ack'ed the "
                        "commit(s). Can be a comma separated list of "
                        "multiple nicknames.")
    parser.add_argument("-b", "--bug", metavar="bug[,bug,...]",
                        help="Launchpad bug number. Can be a comma separated "
                        "list of multiple bug numbers.")
    parser.add_argument("-c", "--cve", metavar="cve[,cve,...]",
                        help="CVE number. Can be a comma separated list of "
                        "multiple cve numbers.")
    parser.add_argument("-f", "--force", action="store_true",
                        help="Really do run git filter-branch.")
    parser.add_argument("-n", "--note", metavar="note",
                        help="Add a note before the last sob line.")
    parser.add_argument("-p", "--provenance", metavar="provenance",
                        help="The name of the provenance for the commit(s). "
                        "It will be appended to the last "
                        "'cherry picked/backported from commit' line.")
    parser.add_argument("-r", "--req", metavar="nick[,nick,...]",
                        help="IRC nickname of the person who requested the "
                        "commit(s). Can be a comma separated list of "
                        "multiple nicknames.")
    parser.add_argument("-s", "--sob", metavar="nick[,nick,...]",
                        help="IRC nickname of the person who signed off on "
                        "commit(s). Can be a comma separated list of "
                        "multiple nicknames.")
    parser.add_argument("-u", "--subject-prefix", metavar="prefix",
                        default='',
                        help="Add a subject prefix.")
    parser.add_argument("rev_list_opts", nargs="*", metavar="rev-list-options",
                        help="Arguments for git rev-list. All positive refs "
                        "included by these options are rewritten.")

    args = parser.parse_args()

    # Read the aliases config file
    with open(os.path.expanduser(os.path.join("~", ".kteam.rc"))) as fh:
        kteam_rc = json.load(fh)

    # Assemble the <foo>-by lists
    reqs = resolve_nicks(kteam_rc, args.req)
    acks = resolve_nicks(kteam_rc, args.ack)
    sobs = resolve_nicks(kteam_rc, args.sob)

    # Split the bugs
    bugs = []
    if args.bug:
        bugs = args.bug.split(",")

    # Split the CVEs
    cves = []
    if args.cve:
        cves = args.cve.split(",")

    # If the rev_list_opts argument is not specified, we expect a commit
    # message on stdin, so read it, modify it and write it back out to stdout.
    # This is the case when we're being called by git-filter-branch.
    if not args.rev_list_opts:
        # Read the commit message from stdin
        msg = []
        for line in sys.stdin:
            msg.append(line.rstrip("\n"))

        # Modify the message and print it
        msg = modify_msg(msg, reqs, acks, sobs, args.provenance, bugs, cves,
                         args.note, args.subject_prefix)
        print("\n".join(msg))

        return 0

    # Construct the message filter command
    mf_cmd = [sys.argv[0]]
    for key, val in vars(args).items():
        if key in ("req", "ack", "sob", "provenance", "bug", "cve",
                   "note", "subject_prefix") and val:
            mf_cmd.extend(["--" + key.replace('_', '-'), "'" + val + "'"])

    # Construct the git-filter-branch command
    gfb_cmd = ["git", "filter-branch", "--force", "--msg-filter",
               " ".join(mf_cmd), "--"] + args.rev_list_opts

    # Do run git-filter-branch
    if args.force:
        run(gfb_cmd, check=True)
        return 0

    # Do a dry-run, i.e., print the modified commit message(s) to stdout

    # Get the list of commits to modify
    rc, commits = run_cmd(["git", "rev-list"] + args.rev_list_opts)
    if rc != 0:
        return rc

    # Modify the commit messages and print them
    for commit in commits:
        # Print the commit header
        _, header = run_cmd(["git", "log",
                             "--format=commit %H%nAuthor: %an <%ae>%n" +
                             "Date:   %cD", commit, "-1"])
        print(YELLOW[0] + header[0] + YELLOW[1])
        print("\n".join(header[1:]))
        print()

        # Modify the commit message and print it
        _, msg = run_cmd(["git", "log", "--format=%B", commit, "-1"])
        msg = modify_msg(msg, reqs, acks, sobs, args.provenance, bugs, cves,
                         args.note, args.subject_prefix, color=GREEN)
        for m in msg:
            print("    {}".format(m))
        print()

    # Print the git-filter-branch command
    print(YELLOW[0] + " ".join(gfb_cmd) + YELLOW[1])
    print("Use -f,--force to really run the above command")

    return 0

if __name__ == "__main__":
    sys.exit(main())
