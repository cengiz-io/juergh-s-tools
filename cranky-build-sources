#!/bin/bash -eu

function out()
{
	local rc=${?}

	trap - EXIT

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function usage()
{
	cat <<EOF
Usage: cranky-build-sources [-c] [-f] [-h] [-n] [-o] POCKET

Build a set of kernel packages.

Positional arguments:
  POCKET       The pocket to get the versions of the previous kernel packages
               from. If set to 'none', uses the version from the previous
               changelog entries.

Optional arguments:
  -c, --current  Only build the source package for the current directory.
  -f, --force    Force the build even if the repos are unclean.
  -h, --help     Show this help text and exit.
  -n, --no-orig  Don't require an orig source tarball.
  -o, --orig     Include the orig source tarball in the upload.
EOF
}

current=0
force=0
pocket=
build_opts=()

bo_meta=()
bo_signed=()
bo_restricted_modules=()
bo_main=()

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-c|--current)
			current=1
			build_opts+=("--current")
			;;
		-f|--force)
			force=1
			;;
		-h|--help)
			usage
			exit
			;;
		-n|--no-orig)
			build_opts+=("--no-orig")
			;;
		-o|--orig)
			bo_main+=("-sa")
			;;
		updates|release|security|proposed|none)
			if [ -z "${pocket}" ] ; then
				pocket=${1}
			else
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if [ -z "${pocket}" ] ; then
	usage
	exit 2
fi

trap out EXIT

if [ "${force}" -eq 0 ] ; then
	clean=1
	if [ ${current} -eq 1  ] ; then
		# Verify that then current source repo is clean
		if [ -n "$(git status --porcelain)" ] ; then
			echo "${PWD}: Repo is unclean" >&2
			clean=0
		fi
	else
		# Verify that all source repos are clean
		while IFS= read -r path ; do
			if [ -n "$(git -C "${path}" status --porcelain)" ] ; then
				echo "${path}: Repo is unclean" >&2
				clean=0
			fi
		done < <(cranky shell-helper source-packages-path)
	fi
	if [ "${clean}" -eq 0 ] ; then
		echo "Use -f, --force to auto-clean before the build" >&2
		exit 1
	fi
fi

if [ "${pocket}" != "none" ] ; then
	# Get the previous versions from the provided pocket
	while IFS=' ' read -r package version rest ; do
		case "${package}" in
			linux-meta*)
				bo_meta+=("-v${version}")
				;;
			linux-signed*)
				bo_signed+=("-v${version}")
				;;
			linux-restricted-modules*)
				bo_restricted_modules+=("-v${version}")
				;;
			linux*)
				bo_main+=("-v${version}")
				;;
			*)
				echo "Unsupported package: ${package}" >&2
				exit 1
		esac
	done < <(cranky rmadison -s -p "${pocket}")
fi

if [ ${#bo_meta[@]} -ne 0 ] ; then
	build_opts+=("--build-opts" "meta:${bo_meta[*]}")
fi
if [ ${#bo_signed[@]} -ne 0 ] ; then
	build_opts+=("--build-opts" "signed:${bo_signed[*]}")
fi
if [ ${#bo_restricted_modules[@]} -ne 0 ] ; then
	build_opts+=("--build-opts" "restricted-modules:${bo_restricted_modules[*]}")
fi
if [ ${#bo_main[@]} -ne 0 ] ; then
	build_opts+=("--build-opts" "main:${bo_main[*]}")
fi

echo -e "\e[33mcranky build-sources ${build_opts[*]}\e[0m"
cranky build-sources "${build_opts[@]}"
