#!/usr/bin/env python3

import argparse
import sys

from launchpadlib.launchpad import Launchpad

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--force", action='store_true')
parser.add_argument("handle")
parser.add_argument("tag")
args = parser.parse_args()

for delim in (':', '/'):
    if delim in args.handle:
        break
series, package = args.handle.split(delim)

tmp = args.tag.split('-')
branch = '-'.join(tmp[:2])
date = '-'.join(tmp[2:])

title = "{}/{}: Update to upstream raspberrypi {} ({})".format(series, package,
                                                               branch, date)
print(title)

description = """
Upstream raspberrypi patchset {}

  Ported from the following raspberrypi branch:
    {}
  from https://github.com/raspberrypi/linux.git

""".format(date, branch)

print(description)

if not args.force:
    print("Use -f, --force to create the bug")
    sys.exit(0)

lp = Launchpad.login_with('tools', 'production', version='devel')

project = lp.projects['ubuntu']
target = lp.load(project.self_link + "/+source/" + package)
bug = lp.bugs.createBug(target=target, title=title, description=description,
                        tags=[], private=False)

print("https://bugs.launchpad.net/bugs/%s" % (bug.id))

# Set the status to 'Confirmed'
for bug_task in bug.bug_tasks_collection:
    bug_task.status = 'Confirmed'
    bug_task.lp_save()

# Nominate the series
ubuntu = lp.distributions['ubuntu']
for s in ubuntu.series_collection:
    if s.name == series:
        nomination = bug.addNomination(target=s)
        if nomination.canApprove():
            nomination.approve()
        break
