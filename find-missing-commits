#!/bin/bash -eu
#
# Find commits on the given branch that are not on the current branch
#

LINUX_REPO=/data/git/linux.git
STABLE_REPO=/data/git/linux-stable.git

function do_patch_id()
{
	local commit patch_id subject fuzzy_subject

	while IFS= read -r commit ; do
		patch_id=$(git show "${commit}" | git patch-id)
		subject=$(git log --format=%s "${commit}" -1)
		fuzzy_subject=$(echo "${subject,,}" | tr -c -d '[:alnum:]')
		echo "__MARK__${commit}__MARK__${patch_id%% *}__MARK__${subject}__MARK__${fuzzy_subject}__MARK__"
	done < <(git log --format=%h --no-merges "${@}")
}

function do_find()
{
	local pattern=$1 infile=$2
	local commit

	commit=$(grep -m 1 -F "${pattern}" "${infile}")
	commit=${commit#__MARK__}
	commit=${commit%%__MARK__*}

	echo "${commit}"
}

function usage()
{
	cat <<EOF
Usage: find-missing-commits [-h] [-r] BRANCH

Find commits on the provided branch BRANCH that are not on the current branch.

Positional arguments:
  BRANCH       The branch to use as a reference.

Optional arguments:
  -h, --help   Show this help text and exit.
  -r, --rerun  Rerun without processing the branches and regenerating the data.
EOF
}

rerun=0
branch=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-r|--rerun)
			rerun=1
			;;
		*)
			if [ -n "${branch}" ] ; then
				usage
				exit 2
			fi
			branch=${1}
			;;
	esac
	shift
done

if [ -z "${branch}" ] ; then
	usage
	exit 2
fi


mb=$(git merge-base HEAD "${branch}")
mb_text=$(git log --format='%h ("%s")' "${mb}" -1 )

echo "Checking current branch for missing commits since: ${mb_text}"

if [ "${rerun}" -eq 0 ] ; then
	echo "Processing current branch"
	do_patch_id "${mb}..HEAD" > .head

	echo "Processing ${branch} branch"
	do_patch_id "${mb}..${branch}" > .branch
fi

cat <<EOF
 Status
 -: Not found on the current branch
 P: Found by patch ID match
 S: Found by subject match
 U: Found by UBUNTU SAUCE subject match
 F: Found by fuzzy subject match
 Z: Found by UBUNTU SAUCE fuzzy subject match
/  Provenance
|  L: Upstream linux
|  S: Upstream stable
|  -: Unknonwn
| /  Commit hash on current branch
| | /             Commit hash on ${branch} branch
| | |            /             Subject
| | |            |            /
| | |            |            |
-------------------------------------------------------------------------------
EOF

while IFS= read -r line ; do
	# shellcheck disable=SC2001
	readarray -t tokens < <(echo "${line}" | sed -e 's,__MARK__,\n,g')
	commit=${tokens[1]}
	patch_id=${tokens[2]}
	subject=${tokens[3]}
	fuzzy_subject=${tokens[4]}

	# Check the provenance of the commit
	if git -C "${LINUX_REPO}" cat-file -e "${commit}^{commit}" 2>/dev/null ; then
		prov=L
	elif git -C "${STABLE_REPO}" cat-file -e "${commit}^{commit}" 2>/dev/null ; then
		prov=S
	else
		prov=-
	fi

	# Check for a matching patch ID
	found=$(do_find "__MARK__${patch_id}__MARK__" .head)
	if [ -n "${found}" ] ; then
		echo "P ${prov} ${found} ${commit} ${subject}"
		continue
	fi

	# Check for a matching subject
	found=$(do_find "__MARK__${subject}__MARK__" .head)
	if [ -n "${found}" ] ; then
		echo "S ${prov} ${found} ${commit} ${subject}"
		continue
	fi

	# Check for a matching UBUNTU SAUCE subject
	found=$(do_find "__MARK__UBUNTU: SAUCE: ${subject}__MARK__" .head)
	if [ -n "${found}" ] ; then
		echo "U ${prov} ${found} ${commit} ${subject}"
		continue
	fi

	# Check for a matching fuzzy subject
	found=$(do_find "__MARK__${fuzzy_subject}__MARK__" .head)
	if [ -n "${found}" ] ; then
		echo "F ${prov} ${found} ${commit} ${subject}"
		continue
	fi

	# Check for a matching UBUNTU SAUCE fuzzy subject
	found=$(do_find "__MARK__ubuntusauce${fuzzy_subject}__MARK__" .head)
	if [ -n "${found}" ] ; then
		echo "Z ${prov} ${found} ${commit} ${subject}"
		continue
	fi

	# Not found
	echo "- ${prov}              ${commit} ${subject//__MARK__/}"
done < <(cat .branch)
