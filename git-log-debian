#!/bin/bash -eu
#
# Show Ubuntu kernel debian* commits and follow them across rebases
#

function out()
{
	local rc=${?}

	trap "" EXIT

	if [ "${rc}" -ne 0 ] ; then
		echo "-- Script failed" >&2
	fi

	exit "${rc}"
}

function parse_changelog()
{
	local commit=${1}
	local debian

	debian=$(git show "${commit}":debian/debian.env 2>/dev/null | \
				 sed -e 's/DEBIAN=//')
	if [ -z "${debian}" ] ; then
		debian=debian.master
	fi

	# Print 'source version release'
	{ git show "${commit}":"${debian}"/changelog 2>/dev/null || echo ; } | \
		head -1 | sed -e 's/;.*//' -e 's/[()]//g'
}

function tag_name()
{
	local name=${1} version=${2}
	local tag

	tag=${name#linux}
	tag=Ubuntu${tag}-${version}
	tag=${tag//~/_}

	echo "${tag}"
}

function log_debian()
{
	local start=${1}
	local first line commit subject tag n1 v1 r1 n2 v2 r2

	first=1
	while IFS= read -r line ; do
		commit=${line%% *}
		subject=${line#* }

		if [ ${first} -eq 1 ] ; then
			echo "${line}"
			first=0
			continue
		fi

		# Check if this is a release commit
		if [ "${subject#UBUNTU: Ubuntu-}" != "${subject}" ] ; then
			tag=${subject#UBUNTU: }
			tag=${tag//~/_}
			if git rev-parse "${tag}" >/dev/null 2>&1 ; then
				# Follow the tag
				echo "-- Follow release tag ${tag}" >&2
				log_debian "${tag}"
				return
			fi
			echo "-- Release tag does not exist: ${tag}" >&2

		# Check if the package name/version/release changed
		elif [ "${subject}" != "UBUNTU: Start new release" ] ; then
			IFS=" " read -r n1 v1 r1 < <(parse_changelog "${commit}")
			IFS=" " read -r n2 v2 r2 < <(parse_changelog "${commit}"~1)

			# No previous entry: Probably an initial import
			if [ -z "${n2}${v2}${r2}" ] && [ -n "${n1}${v1}${r1}" ] ; then
				tag=$(tag_name "${n1}" "${v1}")
				if git rev-parse "${tag}" >/dev/null 2>&1 ; then
					# Follow the tag
					echo "-- Follow import tag ${tag}" >&2
					log_debian "${tag}"
					return
				fi
				echo "-- Import tag does not exist: ${tag}" >&2

			# Previous entry != current entry: Probably a rename or rebase of
			# some sort
			elif [ "${n1}${v1}${r1}" != "${n2}${v2}${r2}" ] ; then
				tag=$(tag_name "${n2}" "${v2}")
				if git rev-parse "${tag}" >/dev/null 2>&1 ; then
					# Follow the tag
					echo "-- Follow rename tag ${tag}" >&2
					log_debian "${tag}"
					return
				fi
				echo "-- Rename tag does not exist: ${tag}" >&2
			fi
		fi

		echo "${line}"
	done < <(git log --oneline "${start}" -- debian debian.*)
}

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-h] [COMMIT]

Show commits that modify debian and debian.* files starting from COMMIT or
HEAD if not provided. Follow commits across rebases.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

commit=

while [ ${#} -ne 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
		*)
			if [ -n "${commit}" ] ; then
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			commit=${1}
			;;
	esac
	shift
done

if [ -z "${commit}" ] ; then
	commit=HEAD
fi

trap out EXIT

if ! git rev-parse --quiet --verify "${commit}" >/dev/null ; then
	echo "Commit does not exist: ${commit}" >&2
	exit 1
fi

log_debian "${commit}"
